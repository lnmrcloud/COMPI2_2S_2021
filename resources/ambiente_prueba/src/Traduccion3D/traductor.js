/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var traductor = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,22],$V1=[1,13],$V2=[1,14],$V3=[1,15],$V4=[1,24],$V5=[1,29],$V6=[1,28],$V7=[1,27],$V8=[1,26],$V9=[1,25],$Va=[1,33],$Vb=[1,32],$Vc=[1,34],$Vd=[1,35],$Ve=[1,36],$Vf=[1,37],$Vg=[1,38],$Vh=[1,30],$Vi=[1,31],$Vj=[2,5,17,18,19,30,40,43,47,48,49,52,54,55,59,63,66,67,68,69,70,71,73],$Vk=[1,56],$Vl=[1,49],$Vm=[1,57],$Vn=[1,58],$Vo=[1,59],$Vp=[1,62],$Vq=[1,47],$Vr=[1,48],$Vs=[1,50],$Vt=[1,51],$Vu=[1,52],$Vv=[1,53],$Vw=[1,54],$Vx=[1,55],$Vy=[1,60],$Vz=[1,61],$VA=[1,63],$VB=[1,64],$VC=[1,67],$VD=[1,68],$VE=[1,69],$VF=[1,70],$VG=[1,71],$VH=[1,72],$VI=[1,73],$VJ=[1,76],$VK=[1,82],$VL=[1,85],$VM=[1,79],$VN=[1,84],$VO=[1,80],$VP=[1,81],$VQ=[28,30],$VR=[1,98],$VS=[1,99],$VT=[1,100],$VU=[1,101],$VV=[1,102],$VW=[1,103],$VX=[1,104],$VY=[1,105],$VZ=[1,106],$V_=[1,107],$V$=[1,108],$V01=[1,109],$V11=[1,110],$V21=[1,111],$V31=[1,112],$V41=[1,113],$V51=[8,29,36,38,42,53,74,75,77,78,79,80,81,82,83,84,85,86,87,94,95,101],$V61=[2,95],$V71=[1,135],$V81=[1,136],$V91=[1,139],$Va1=[1,140],$Vb1=[8,29,36,38,42,53,74,75,101],$Vc1=[1,203],$Vd1=[36,38],$Ve1=[1,220],$Vf1=[1,229],$Vg1=[8,29,36,38,42,53,74,75,77,78,79,80,81,82,94,101],$Vh1=[8,29,36,38,42,53,74,75,77,78,79,80,81,82,83,84,94,101],$Vi1=[8,29,36,38,42,53,74,75,77,78,79,80,81,82,83,84,85,86,87,94,101],$Vj1=[1,253],$Vk1=[1,259],$Vl1=[1,270],$Vm1=[1,271],$Vn1=[1,279],$Vo1=[1,278],$Vp1=[1,266],$Vq1=[30,43,66,67,68,69,70],$Vr1=[1,313],$Vs1=[29,38],$Vt1=[2,5,17,18,19,30,40,43,47,48,49,52,54,55,57,59,63,66,67,68,69,70,71,73],$Vu1=[1,338],$Vv1=[1,383],$Vw1=[43,52,54];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"DECLARACION_VARIABLES":7,"sim_PuntoComa":8,"ASIGNACION_VARIABLES":9,"SENTENCIA_IF":10,"SENTENCIA_IF_SIN_LLAVES":11,"SENTENCIA_SWITCH":12,"SENTENCIA_WHILE":13,"SENTENCIA_DOWHILE":14,"SENTENCIA_FOR":15,"SENTENCIA_FOR_IN":16,"res_Break":17,"res_Continue":18,"res_Return":19,"EXPRE":20,"ARREGLO":21,"PRINT":22,"PRINTLN":23,"FUNCIONES":24,"STRUCT":25,"LLAMADA":26,"TIPO":27,"sim_CorcheteApertura":28,"sim_CorcheteCierre":29,"ER_ID":30,"sim_Igual":31,"LISTA_ARREGLO":32,"sim_Punto":33,"res_Push":34,"sim_ParentesisApertura":35,"sim_ParentesisCierre":36,"res_Pop":37,"sim_Coma":38,"RETORNAR":39,"res_For":40,"res_In":41,"sim_LlaveApertura":42,"sim_LlaveCierre":43,"ACTUALIZACION":44,"sim_Incremento":45,"sim_Decremento":46,"res_Do":47,"res_While":48,"res_Switch":49,"CASES_LIST":50,"DEFAULT":51,"res_Case":52,"sim_DosPuntos":53,"res_Default":54,"res_If":55,"INSTRUCCION_UNICA":56,"res_Else":57,"PARAMETROS_LLAMADA":58,"res_Struct":59,"LISTA_ATRIBUTOS_STRUCT":60,"VARIABLES_STRUCT":61,"LISTA_SIMBOLOS":62,"res_Void":63,"res_Main":64,"PARAMETROS":65,"res_Int":66,"res_Double":67,"res_Boolean":68,"res_Char":69,"res_String":70,"res_Print":71,"IMPRIMIR_VARIOS":72,"res_PrintLn":73,"sim_OR":74,"sim_AND":75,"sim_NOT":76,"sim_Igualacion":77,"sim_Diferenciacion":78,"sim_MenorQue":79,"sim_MenorIgualQue":80,"sim_MayorQue":81,"sim_MayorIgualQue":82,"sim_Mas":83,"sim_Menos":84,"sim_Multiplicacion":85,"sim_Division":86,"sim_Modulo":87,"res_Pow":88,"res_Sin":89,"res_Log10":90,"res_Cos":91,"res_Tan":92,"res_Sqrt":93,"sim_Ampersand":94,"sim_Potencia":95,"res_CaracterOfPosition":96,"res_SubString":97,"res_Length":98,"res_ToUppercase":99,"res_ToLowercase":100,"sim_Interrogacion":101,"res_Parse":102,"res_ToInt":103,"res_ToDouble":104,"res_Typeof":105,"sim_Numeral":106,"res_Begin":107,"res_End":108,"VAL":109,"ER_ENTERO":110,"ER_DECIMAL":111,"ER_CADENA":112,"ER_CHAR":113,"res_True":114,"res_False":115,"res_Null":116,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"sim_PuntoComa",17:"res_Break",18:"res_Continue",19:"res_Return",28:"sim_CorcheteApertura",29:"sim_CorcheteCierre",30:"ER_ID",31:"sim_Igual",33:"sim_Punto",34:"res_Push",35:"sim_ParentesisApertura",36:"sim_ParentesisCierre",37:"res_Pop",38:"sim_Coma",40:"res_For",41:"res_In",42:"sim_LlaveApertura",43:"sim_LlaveCierre",45:"sim_Incremento",46:"sim_Decremento",47:"res_Do",48:"res_While",49:"res_Switch",52:"res_Case",53:"sim_DosPuntos",54:"res_Default",55:"res_If",57:"res_Else",59:"res_Struct",63:"res_Void",64:"res_Main",66:"res_Int",67:"res_Double",68:"res_Boolean",69:"res_Char",70:"res_String",71:"res_Print",73:"res_PrintLn",74:"sim_OR",75:"sim_AND",76:"sim_NOT",77:"sim_Igualacion",78:"sim_Diferenciacion",79:"sim_MenorQue",80:"sim_MenorIgualQue",81:"sim_MayorQue",82:"sim_MayorIgualQue",83:"sim_Mas",84:"sim_Menos",85:"sim_Multiplicacion",86:"sim_Division",87:"sim_Modulo",88:"res_Pow",89:"res_Sin",90:"res_Log10",91:"res_Cos",92:"res_Tan",93:"res_Sqrt",94:"sim_Ampersand",95:"sim_Potencia",96:"res_CaracterOfPosition",97:"res_SubString",98:"res_Length",99:"res_ToUppercase",100:"res_ToLowercase",101:"sim_Interrogacion",102:"res_Parse",103:"res_ToInt",104:"res_ToDouble",105:"res_Typeof",106:"sim_Numeral",107:"res_Begin",108:"res_End",110:"ER_ENTERO",111:"ER_DECIMAL",112:"ER_CADENA",113:"ER_CHAR",114:"res_True",115:"res_False",116:"res_Null"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[6,2],[6,3],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,1],[21,9],[21,7],[21,7],[21,7],[21,6],[32,5],[32,3],[32,3],[32,1],[39,2],[39,3],[16,7],[15,11],[15,11],[44,3],[44,2],[44,2],[14,9],[13,7],[12,8],[12,7],[12,7],[50,5],[50,4],[51,3],[11,5],[11,7],[56,2],[56,2],[56,2],[56,2],[56,1],[56,1],[56,1],[56,1],[56,2],[10,7],[10,11],[10,9],[26,3],[26,4],[58,3],[58,1],[25,5],[25,6],[25,6],[60,2],[60,1],[61,3],[61,2],[61,3],[61,2],[7,2],[7,2],[9,3],[9,2],[9,2],[24,7],[24,7],[24,8],[24,7],[24,8],[65,4],[65,3],[65,2],[65,1],[27,1],[27,1],[27,1],[27,1],[27,1],[62,1],[62,3],[62,3],[22,5],[23,5],[72,3],[72,1],[20,3],[20,3],[20,2],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,2],[20,3],[20,6],[20,4],[20,4],[20,4],[20,4],[20,4],[20,3],[20,3],[20,6],[20,8],[20,5],[20,5],[20,5],[20,5],[20,6],[20,6],[20,6],[20,4],[20,4],[20,4],[20,6],[20,4],[20,2],[20,4],[20,6],[20,6],[20,6],[20,6],[20,5],[20,1],[20,1],[109,1],[109,1],[109,1],[109,1],[109,1],[109,1],[109,1],[109,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

            console.log(variables);
            return principal($$[$0-1],contador);
        
break;
case 2:
this.$ = `${$$[$0-1]} \n${$$[$0]}`;
break;
case 3: case 18: case 19: case 101: case 148: case 151: case 152: case 156:
this.$ = $$[$0];
break;
case 23:

                                            console.log("Error Sintactico: " + yytext + ", linea: " + this._$.first_line + ", columna: " + this._$.first_column);
                                        
break;
case 60:

        // console.log($$[$0-4]);
        // let retornoIf;        
        // retornoIf = sentenciaIF(etiquetas,$$[$0-4],$$[$0-1]);
        // etiquetas = retornoIf[0]; this.$ = retornoIf[1];

        // console.log($$[$0-1]);
        // let retornoIf;
        // retornoIf = pruebaIF($$[$0-4],$$[$0-1],etiquetas);
        // this.$ = retornoIf[0];
    
break;
case 61:

        // if else
        console.log($$[$0-8]);
        let retornoifelse;
        retornoifelse = ifelse(etiquetas,$$[$0-8],$$[$0-5],$$[$0-1]); 
        etiquetas = retornoifelse[0];
        this.$ = retornoifelse[1];
        // this.$ = $$[$0-8];
    
break;
case 76:

        if($$[$0] === 'null'){
            // console.log('una declaracion sin asginaciones');
            console.log(punteroStackTemporal);
            if(punteroStackTemporal > 0){
                let retornoMultipleDeclaracionesVacias;
                retornoMultipleDeclaracionesVacias = declarcionMultipleVacia(punteroStackTemporal,$$[$0-1]);
                // punteroStack = retornoMultipleDeclaracionesVacias[0];
                this.$ = retornoMultipleDeclaracionesVacias[0];
                break;
            } else {
                let retornoDeclaracionVacia;
                retornoDeclaracionVacia = declarcionVacia(punteroStack,$$[$0-1]);
                punteroStack = retornoDeclaracionVacia[0];
                this.$ = retornoDeclaracionVacia[1];
                break;
            }
        } else {
            // console.log('una declaracion con asignacion');
            let retornoDeclaracion;
            retornoDeclaracion = declaracion(punteroStack,$$[$0-1],$$[$0]);
            punteroStack = retornoDeclaracion[0];
            this.$ = retornoDeclaracion[1];
            break;
        }       
    
break;
case 81: case 117:
this.$ = $$[$0-1];
break;
case 90:
this.$ = 'int';
break;
case 91:
this.$ = 'double';
break;
case 94:
this.$ = 'string';
break;
case 95:
variables.push(addVariables(`${$$[$0]}`,0.0,punteroStack)); punteroStack++; this.$ = 'null';
break;
case 96:
variables.push(addVariables(`${$$[$0-2]}`,$$[$0],punteroStack)); this.$=$$[$0];
break;
case 97:
        
        variables.push(addVariables(`${$$[$0-2]}`,0.0,punteroStack));  
        punteroStack++;      
        punteroStackTemporal++;
        this.$ =$$[$0];
    
break;
case 98:
   
        if(typeof $$[$0-2] === 'object'){
            // console.log('entro un objeto');
            this.$ = impresionExpresiones(contador,$$[$0-2][1]);
            break;
        } else {
            let retornoprint;
            retornoprint = impresion(punteroStack,contador,$$[$0-2],variables);
            punteroStack = retornoprint[0];
            contador = retornoprint[1];
            this.$ = retornoprint[2];
            break;
        }
    
break;
case 99:

        if(typeof $$[$0-2] === 'object'){
            // console.log('entro un objeto');
            this.$ = impresionExpresionesln(contador,$$[$0-2][1]);
            break;
        } else {
            let retornoprintln;
            retornoprintln = impresionln(punteroStack,contador,$$[$0-2],variables);
            console.log(retornoprintln);
            punteroStack = retornoprintln[0];
            contador = retornoprintln[1];
            this.$ = retornoprintln[2];
            break;
        }
        if ($$[$0-2] === '') {this.$ = ''; break;}
    
break;
case 100:
this.$ = '';
break;
case 103:

        console.log(typeof $$[$0-2]);
        console.log(typeof $$[$0]);
        console.log($$[$0-2]);
        console.log($$[$0]);
        console.log(comparador_and($$[$0-2],$$[$0]));
        this.$ = comparador_and($$[$0-2],$$[$0]);
    
break;
case 105:

        let retornoIgual; 
        retornoIgual = igualIgual(contador,etiquetas,$$[$0-2],$$[$0],variables);
        contador=retornoIgual[0];
        etiquetas=retornoIgual[1];
        console.log(retornoIgual);
        this.$ = retornoIgual;
    
break;
case 109:
let retornoMayor = mayorQue(contador,$$[$0-2],$$[$0]); this.$ =retornoMayor;
break;
case 111:
let retornoSuma = suma(contador,$$[$0-2],$$[$0]); contador=retornoSuma[0]; this.$=retornoSuma;
break;
case 112:
let retornoResta = resta(contador,$$[$0-2],$$[$0]); contador=retornoResta[0]; this.$=retornoResta;
break;
case 113:
let retornoMultiplicacion = multiplicacion(contador,$$[$0-2],$$[$0]); contador=retornoMultiplicacion[0];this.$=retornoMultiplicacion;
break;
case 114:
let retornoDivision = division(contador,$$[$0-2],$$[$0]); contador=retornoDivision[0]; this.$=retornoDivision;
break;
case 115:
let retornoModulo = modulo(contador,$$[$0-2],$$[$0]); contador=retornoModulo[0]; this.$=retornoModulo;
break;
case 116:
let retornoUnario = unario(contador,$$[$0]); contador=retornoUnario[0]; this.$=retornoUnario;
break;
case 149:
this.$ = Number($$[$0]);
break;
case 150:
this.$= $$[$0];
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V1,18:$V2,19:$V3,21:16,22:17,23:18,24:19,25:20,26:21,27:23,30:$V4,40:$V5,47:$V6,48:$V7,49:$V8,55:$V9,59:$Va,63:$Vb,66:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh,73:$Vi},{1:[3]},{2:$V0,5:[1,39],6:40,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V1,18:$V2,19:$V3,21:16,22:17,23:18,24:19,25:20,26:21,27:23,30:$V4,40:$V5,47:$V6,48:$V7,49:$V8,55:$V9,59:$Va,63:$Vb,66:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh,73:$Vi},o($Vj,[2,3]),{8:[1,41]},{8:[1,42]},o($Vj,[2,6]),o($Vj,[2,7]),o($Vj,[2,8]),o($Vj,[2,9]),o($Vj,[2,10]),o($Vj,[2,11]),o($Vj,[2,12]),{8:[1,43]},{8:[1,44]},{8:[1,45],20:46,26:65,30:$Vk,35:$Vl,66:$Vm,67:$Vn,68:$Vo,70:$Vp,76:$Vq,84:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,109:66,110:$VC,111:$VD,112:$VE,113:$VF,114:$VG,115:$VH,116:$VI},o($Vj,[2,17]),o($Vj,[2,18]),o($Vj,[2,19]),o($Vj,[2,20]),o($Vj,[2,21]),{8:[1,74]},o($Vj,[2,23]),{28:$VJ,30:[1,77],62:75},{28:$VK,30:$VL,31:$VM,33:[1,83],35:$VN,45:$VO,46:$VP,62:78},{35:[1,86]},{35:[1,87]},{35:[1,88]},{42:[1,89]},{30:[1,91],35:[1,90]},{35:[1,92]},{35:[1,93]},{30:[1,95],64:[1,94]},{30:[1,96]},o($VQ,[2,90]),o($VQ,[2,91]),o($VQ,[2,92]),o($VQ,[2,93]),o($VQ,[2,94]),{1:[2,1]},o($Vj,[2,2]),o($Vj,[2,4]),o($Vj,[2,5]),o($Vj,[2,13]),o($Vj,[2,14]),o($Vj,[2,15]),{8:[1,97],74:$VR,75:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,94:$V21,95:$V31,101:$V41},{20:114,26:65,30:$Vk,35:$Vl,66:$Vm,67:$Vn,68:$Vo,70:$Vp,76:$Vq,84:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,109:66,110:$VC,111:$VD,112:$VE,113:$VF,114:$VG,115:$VH,116:$VI},{20:115,26:65,30:$Vk,35:$Vl,66:$Vm,67:$Vn,68:$Vo,70:$Vp,76:$Vq,84:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,109:66,110:$VC,111:$VD,112:$VE,113:$VF,114:$VG,115:$VH,116:$VI},{20:116,26:65,30:$Vk,35:$Vl,66:$Vm,67:$Vn,68:$Vo,70:$Vp,76:$Vq,84:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,109:66,110:$VC,111:$VD,112:$VE,113:$VF,114:$VG,115:$VH,116:$VI},{35:[1,117]},{35:[1,118]},{35:[1,119]},{35:[1,120]},{35:[1,121]},{35:[1,122]},o($V51,[2,156],{28:[1,124],33:[1,123],35:$VN}),{33:[1,125]},{33:[1,126]},{33:[1,127]},{35:[1,128]},{35:[1,129]},{35:[1,130]},{35:[1,131]},{30:[1,132]},o($V51,[2,147]),o($V51,[2,148]),o($V51,[2,149]),o($V51,[2,150]),o($V51,[2,151]),o($V51,[2,152]),o($V51,[2,153]),o($V51,[2,154]),o($V51,[2,155]),o($Vj,[2,22]),{8:[2,76]},{29:[1,133]},{8:$V61,31:$V71,35:[1,134],38:$V81},{8:[2,77]},{20:137,26:65,30:$Vk,35:$Vl,66:$Vm,67:$Vn,68:$Vo,70:$Vp,76:$Vq,84:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,109:66,110:$VC,111:$VD,112:$VE,113:$VF,114:$VG,115:$VH,116:$VI},{8:[2,79]},{8:[2,80]},{20:138,26:65,30:$Vk,35:$Vl,66:$Vm,67:$Vn,68:$Vo,70:$Vp,76:$Vq,84:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,109:66,110:$VC,111:$VD,112:$VE,113:$VF,114:$VG,115:$VH,116:$VI},{30:[1,141],34:$V91,37:$Va1},{20:144,26:65,30:$Vk,35:$Vl,36:[1,142],58:143,66:$Vm,67:$Vn,68:$Vo,70:$Vp,76:$Vq,84:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,109:66,110:$VC,111:$VD,112:$VE,113:$VF,114:$VG,115:$VH,116:$VI},{8:$V61,31:$V71,38:$V81},{20:145,26:65,30:$Vk,35:$Vl,66:$Vm,67:$Vn,68:$Vo,70:$Vp,76:$Vq,84:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,109:66,110:$VC,111:$VD,112:$VE,113:$VF,114:$VG,115:$VH,116:$VI},{20:146,26:65,30:$Vk,35:$Vl,66:$Vm,67:$Vn,68:$Vo,70:$Vp,76:$Vq,84:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,109:66,110:$VC,111:$VD,112:$VE,113:$VF,114:$VG,115:$VH,116:$VI},{20:147,26:65,30:$Vk,35:$Vl,66:$Vm,67:$Vn,68:$Vo,70:$Vp,76:$Vq,84:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,109:66,110:$VC,111:$VD,112:$VE,113:$VF,114:$VG,115:$VH,116:$VI},{2:$V0,4:148,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V1,18:$V2,19:$V3,21:16,22:17,23:18,24:19,25:20,26:21,27:23,30:$V4,40:$V5,47:$V6,48:$V7,49:$V8,55:$V9,59:$Va,63:$Vb,66:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh,73:$Vi},{7:149,9:150,27:151,30:[1,152],66:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg},{41:[1,153]},{20:155,26:65,30:$Vk,35:$Vl,66:$Vm,67:$Vn,68:$Vo,70:$Vp,72:154,76:$Vq,84:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,109:66,110:$VC,111:$VD,112:$VE,113:$VF,114:$VG,115:$VH,116:$VI},{20:155,26:65,30:$Vk,35:$Vl,66:$Vm,67:$Vn,68:$Vo,70:$Vp,72:156,76:$Vq,84:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,109:66,110:$VC,111:$VD,112:$VE,113:$VF,114:$VG,115:$VH,116:$VI},{35:[1,157]},{35:[1,158]},{42:[1,159]},o($Vj,[2,16]),{20:160,26:65,30:$Vk,35:$Vl,66:$Vm,67:$Vn,68:$Vo,70:$Vp,76:$Vq,84:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,109:66,110:$VC,111:$VD,112:$VE,113:$VF,114:$VG,115:$VH,116:$VI},{20:161,26:65,30:$Vk,35:$Vl,66:$Vm,67:$Vn,68:$Vo,70:$Vp,76:$Vq,84:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,109:66,110:$VC,111:$VD,112:$VE,113:$VF,114:$VG,115:$VH,116:$VI},{20:162,26:65,30:$Vk,35:$Vl,66:$Vm,67:$Vn,68:$Vo,70:$Vp,76:$Vq,84:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,109:66,110:$VC,111:$VD,112:$VE,113:$VF,114:$VG,115:$VH,116:$VI},{20:163,26:65,30:$Vk,35:$Vl,66:$Vm,67:$Vn,68:$Vo,70:$Vp,76:$Vq,84:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,109:66,110:$VC,111:$VD,112:$VE,113:$VF,114:$VG,115:$VH,116:$VI},{20:164,26:65,30:$Vk,35:$Vl,66:$Vm,67:$Vn,68:$Vo,70:$Vp,76:$Vq,84:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,109:66,110:$VC,111:$VD,112:$VE,113:$VF,114:$VG,115:$VH,116:$VI},{20:165,26:65,30:$Vk,35:$Vl,66:$Vm,67:$Vn,68:$Vo,70:$Vp,76:$Vq,84:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,109:66,110:$VC,111:$VD,112:$VE,113:$VF,114:$VG,115:$VH,116:$VI},{20:166,26:65,30:$Vk,35:$Vl,66:$Vm,67:$Vn,68:$Vo,70:$Vp,76:$Vq,84:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,109:66,110:$VC,111:$VD,112:$VE,113:$VF,114:$VG,115:$VH,116:$VI},{20:167,26:65,30:$Vk,35:$Vl,66:$Vm,67:$Vn,68:$Vo,70:$Vp,76:$Vq,84:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,109:66,110:$VC,111:$VD,112:$VE,113:$VF,114:$VG,115:$VH,116:$VI},{20:168,26:65,30:$Vk,35:$Vl,66:$Vm,67:$Vn,68:$Vo,70:$Vp,76:$Vq,84:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,109:66,110:$VC,111:$VD,112:$VE,113:$VF,114:$VG,115:$VH,116:$VI},{20:169,26:65,30:$Vk,35:$Vl,66:$Vm,67:$Vn,68:$Vo,70:$Vp,76:$Vq,84:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,109:66,110:$VC,111:$VD,112:$VE,113:$VF,114:$VG,115:$VH,116:$VI},{20:170,26:65,30:$Vk,35:$Vl,66:$Vm,67:$Vn,68:$Vo,70:$Vp,76:$Vq,84:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,109:66,110:$VC,111:$VD,112:$VE,113:$VF,114:$VG,115:$VH,116:$VI},{20:171,26:65,30:$Vk,35:$Vl,66:$Vm,67:$Vn,68:$Vo,70:$Vp,76:$Vq,84:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,109:66,110:$VC,111:$VD,112:$VE,113:$VF,114:$VG,115:$VH,116:$VI},{20:172,26:65,30:$Vk,35:$Vl,66:$Vm,67:$Vn,68:$Vo,70:$Vp,76:$Vq,84:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,109:66,110:$VC,111:$VD,112:$VE,113:$VF,114:$VG,115:$VH,116:$VI},{20:173,26:65,30:$Vk,35:$Vl,66:$Vm,67:$Vn,68:$Vo,70:$Vp,76:$Vq,84:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,109:66,110:$VC,111:$VD,112:$VE,113:$VF,114:$VG,115:$VH,116:$VI},{20:174,26:65,30:$Vk,35:$Vl,66:$Vm,67:$Vn,68:$Vo,70:$Vp,76:$Vq,84:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,109:66,110:$VC,111:$VD,112:$VE,113:$VF,114:$VG,115:$VH,116:$VI},{20:175,26:65,30:$Vk,35:$Vl,66:$Vm,67:$Vn,68:$Vo,70:$Vp,76:$Vq,84:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,109:66,110:$VC,111:$VD,112:$VE,113:$VF,114:$VG,115:$VH,116:$VI},o($Vb1,[2,104],{77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,94:$V21,95:$V31}),o($V51,[2,116]),{36:[1,176],74:$VR,75:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,94:$V21,95:$V31,101:$V41},{20:177,26:65,30:$Vk,35:$Vl,66:$Vm,67:$Vn,68:$Vo,70:$Vp,76:$Vq,84:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,109:66,110:$VC,111:$VD,112:$VE,113:$VF,114:$VG,115:$VH,116:$VI},{20:178,26:65,30:$Vk,35:$Vl,66:$Vm,67:$Vn,68:$Vo,70:$Vp,76:$Vq,84:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,109:66,110:$VC,111:$VD,112:$VE,113:$VF,114:$VG,115:$VH,116:$VI},{20:179,26:65,30:$Vk,35:$Vl,66:$Vm,67:$Vn,68:$Vo,70:$Vp,76:$Vq,84:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,109:66,110:$VC,111:$VD,112:$VE,113:$VF,114:$VG,115:$VH,116:$VI},{20:180,26:65,30:$Vk,35:$Vl,66:$Vm,67:$Vn,68:$Vo,70:$Vp,76:$Vq,84:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,109:66,110:$VC,111:$VD,112:$VE,113:$VF,114:$VG,115:$VH,116:$VI},{20:181,26:65,30:$Vk,35:$Vl,66:$Vm,67:$Vn,68:$Vo,70:$Vp,76:$Vq,84:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,109:66,110:$VC,111:$VD,112:$VE,113:$VF,114:$VG,115:$VH,116:$VI},{20:182,26:65,30:$Vk,35:$Vl,66:$Vm,67:$Vn,68:$Vo,70:$Vp,76:$Vq,84:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,109:66,110:$VC,111:$VD,112:$VE,113:$VF,114:$VG,115:$VH,116:$VI},{37:[1,188],96:[1,183],97:[1,184],98:[1,185],99:[1,186],100:[1,187]},{20:189,26:65,30:$Vk,35:$Vl,66:$Vm,67:$Vn,68:$Vo,70:$Vp,76:$Vq,84:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,107:[1,190],109:66,110:$VC,111:$VD,112:$VE,113:$VF,114:$VG,115:$VH,116:$VI},{102:[1,191]},{102:[1,192]},{102:[1,193]},{20:194,26:65,30:$Vk,35:$Vl,66:$Vm,67:$Vn,68:$Vo,70:$Vp,76:$Vq,84:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,109:66,110:$VC,111:$VD,112:$VE,113:$VF,114:$VG,115:$VH,116:$VI},{20:195,26:65,30:$Vk,35:$Vl,66:$Vm,67:$Vn,68:$Vo,70:$Vp,76:$Vq,84:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,109:66,110:$VC,111:$VD,112:$VE,113:$VF,114:$VG,115:$VH,116:$VI},{20:196,26:65,28:[1,197],30:$Vk,35:$Vl,66:$Vm,67:$Vn,68:$Vo,70:$Vp,76:$Vq,84:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,109:66,110:$VC,111:$VD,112:$VE,113:$VF,114:$VG,115:$VH,116:$VI},{20:198,26:65,30:$Vk,35:$Vl,66:$Vm,67:$Vn,68:$Vo,70:$Vp,76:$Vq,84:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,109:66,110:$VC,111:$VD,112:$VE,113:$VF,114:$VG,115:$VH,116:$VI},o($V51,[2,140]),{30:[1,199]},{27:202,30:$Vc1,36:[1,200],65:201,66:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg},{20:204,26:65,30:$Vk,35:$Vl,66:$Vm,67:$Vn,68:$Vo,70:$Vp,76:$Vq,84:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,109:66,110:$VC,111:$VD,112:$VE,113:$VF,114:$VG,115:$VH,116:$VI},{30:$VL,62:205},{8:[2,78],74:$VR,75:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,94:$V21,95:$V31,101:$V41},{29:[1,206],74:$VR,75:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,94:$V21,95:$V31,101:$V41},{35:[1,207]},{35:[1,208]},{31:[1,209]},o($V51,[2,63]),{36:[1,210],38:[1,211]},o($Vd1,[2,66],{74:$VR,75:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,94:$V21,95:$V31,101:$V41}),{36:[1,212],74:$VR,75:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,94:$V21,95:$V31,101:$V41},{36:[1,213],74:$VR,75:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,94:$V21,95:$V31,101:$V41},{36:[1,214],74:$VR,75:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,94:$V21,95:$V31,101:$V41},{2:$V0,6:40,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V1,18:$V2,19:$V3,21:16,22:17,23:18,24:19,25:20,26:21,27:23,30:$V4,40:$V5,43:[1,215],47:$V6,48:$V7,49:$V8,55:$V9,59:$Va,63:$Vb,66:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh,73:$Vi},{8:[1,216]},{8:[1,217]},{30:$VL,62:75},{30:$VL,31:$VM,45:$VO,46:$VP,62:78},{20:218,26:65,30:$Vk,35:$Vl,66:$Vm,67:$Vn,68:$Vo,70:$Vp,76:$Vq,84:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,109:66,110:$VC,111:$VD,112:$VE,113:$VF,114:$VG,115:$VH,116:$VI},{36:[1,219],38:$Ve1},o($Vd1,[2,101],{74:$VR,75:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,94:$V21,95:$V31,101:$V41}),{36:[1,221],38:$Ve1},{36:[1,222]},{27:202,30:$Vc1,36:[1,223],65:224,66:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg},{27:228,30:$Vf1,43:[1,225],60:226,61:227,66:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg},o([8,29,36,38,42,53,74,101],[2,102],{75:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,94:$V21,95:$V31}),o($Vb1,[2,103],{77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,94:$V21,95:$V31}),o($Vg1,[2,105],{83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,95:$V31}),o($Vg1,[2,106],{83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,95:$V31}),o($Vg1,[2,107],{83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,95:$V31}),o($Vg1,[2,108],{83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,95:$V31}),o($Vg1,[2,109],{83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,95:$V31}),o($Vg1,[2,110],{83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,95:$V31}),o($Vh1,[2,111],{85:$V$,86:$V01,87:$V11,95:$V31}),o($Vh1,[2,112],{85:$V$,86:$V01,87:$V11,95:$V31}),o($Vi1,[2,113],{95:$V31}),o($Vi1,[2,114],{95:$V31}),o($Vi1,[2,115],{95:$V31}),o([8,29,36,38,42,53,74,75,94,101],[2,124],{77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,95:$V31}),o($Vi1,[2,125]),{53:[1,230],74:$VR,75:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,94:$V21,95:$V31,101:$V41},o($V51,[2,117]),{38:[1,231],74:$VR,75:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,94:$V21,95:$V31,101:$V41},{36:[1,232],74:$VR,75:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,94:$V21,95:$V31,101:$V41},{36:[1,233],74:$VR,75:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,94:$V21,95:$V31,101:$V41},{36:[1,234],74:$VR,75:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,94:$V21,95:$V31,101:$V41},{36:[1,235],74:$VR,75:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,94:$V21,95:$V31,101:$V41},{36:[1,236],74:$VR,75:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,94:$V21,95:$V31,101:$V41},{35:[1,237]},{35:[1,238]},{35:[1,239]},{35:[1,240]},{35:[1,241]},{35:[1,242]},{29:[1,243],53:[1,244],74:$VR,75:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,94:$V21,95:$V31,101:$V41},{53:[1,245]},{35:[1,246]},{35:[1,247]},{35:[1,248]},{36:[1,249],74:$VR,75:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,94:$V21,95:$V31,101:$V41},{36:[1,250],74:$VR,75:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,94:$V21,95:$V31,101:$V41},{36:[1,251],74:$VR,75:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,94:$V21,95:$V31,101:$V41},{20:254,26:65,28:$Vj1,30:$Vk,32:252,35:$Vl,66:$Vm,67:$Vn,68:$Vo,70:$Vp,76:$Vq,84:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,109:66,110:$VC,111:$VD,112:$VE,113:$VF,114:$VG,115:$VH,116:$VI},{36:[1,255],74:$VR,75:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,94:$V21,95:$V31,101:$V41},{31:[1,256]},{42:[1,257]},{36:[1,258],38:$Vk1},{30:[1,260]},o($Vd1,[2,89]),{8:[2,96],74:$VR,75:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,94:$V21,95:$V31,101:$V41},{8:[2,97]},{31:[1,261]},{20:262,26:65,30:$Vk,35:$Vl,66:$Vm,67:$Vn,68:$Vo,70:$Vp,76:$Vq,84:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,109:66,110:$VC,111:$VD,112:$VE,113:$VF,114:$VG,115:$VH,116:$VI},{36:[1,263]},{20:264,26:65,30:$Vk,35:$Vl,66:$Vm,67:$Vn,68:$Vo,70:$Vp,76:$Vq,84:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,109:66,110:$VC,111:$VD,112:$VE,113:$VF,114:$VG,115:$VH,116:$VI},o($V51,[2,64]),{20:265,26:65,30:$Vk,35:$Vl,66:$Vm,67:$Vn,68:$Vo,70:$Vp,76:$Vq,84:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,109:66,110:$VC,111:$VD,112:$VE,113:$VF,114:$VG,115:$VH,116:$VI},{7:268,9:269,17:$Vl1,18:$Vm1,19:$Vn1,21:273,22:274,23:275,26:276,27:277,30:$Vo1,39:272,42:$Vp1,56:267,66:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh,73:$Vi},{42:[1,280]},{42:[1,281]},{48:[1,282]},{20:283,26:65,30:$Vk,35:$Vl,66:$Vm,67:$Vn,68:$Vo,70:$Vp,76:$Vq,84:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,109:66,110:$VC,111:$VD,112:$VE,113:$VF,114:$VG,115:$VH,116:$VI},{20:284,26:65,30:$Vk,35:$Vl,66:$Vm,67:$Vn,68:$Vo,70:$Vp,76:$Vq,84:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,109:66,110:$VC,111:$VD,112:$VE,113:$VF,114:$VG,115:$VH,116:$VI},{42:[1,285],74:$VR,75:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,94:$V21,95:$V31,101:$V41},{8:[1,286]},{20:287,26:65,30:$Vk,35:$Vl,66:$Vm,67:$Vn,68:$Vo,70:$Vp,76:$Vq,84:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,109:66,110:$VC,111:$VD,112:$VE,113:$VF,114:$VG,115:$VH,116:$VI},{8:[1,288]},{42:[1,289]},{42:[1,290]},{36:[1,291],38:$Vk1},{8:[1,292]},{27:228,30:$Vf1,43:[1,293],61:294,66:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg},o($Vq1,[2,71]),{30:[1,295]},{30:[1,296]},{20:297,26:65,30:$Vk,35:$Vl,66:$Vm,67:$Vn,68:$Vo,70:$Vp,76:$Vq,84:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,109:66,110:$VC,111:$VD,112:$VE,113:$VF,114:$VG,115:$VH,116:$VI},{20:298,26:65,30:$Vk,35:$Vl,66:$Vm,67:$Vn,68:$Vo,70:$Vp,76:$Vq,84:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,109:66,110:$VC,111:$VD,112:$VE,113:$VF,114:$VG,115:$VH,116:$VI},o($V51,[2,119]),o($V51,[2,120]),o($V51,[2,121]),o($V51,[2,122]),o($V51,[2,123]),{20:299,26:65,30:$Vk,35:$Vl,66:$Vm,67:$Vn,68:$Vo,70:$Vp,76:$Vq,84:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,109:66,110:$VC,111:$VD,112:$VE,113:$VF,114:$VG,115:$VH,116:$VI},{20:300,26:65,30:$Vk,35:$Vl,66:$Vm,67:$Vn,68:$Vo,70:$Vp,76:$Vq,84:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,109:66,110:$VC,111:$VD,112:$VE,113:$VF,114:$VG,115:$VH,116:$VI},{36:[1,301]},{36:[1,302]},{36:[1,303]},{36:[1,304]},o($V51,[2,141]),{20:306,26:65,30:$Vk,35:$Vl,66:$Vm,67:$Vn,68:$Vo,70:$Vp,76:$Vq,84:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,108:[1,305],109:66,110:$VC,111:$VD,112:$VE,113:$VF,114:$VG,115:$VH,116:$VI},{20:308,26:65,30:$Vk,35:$Vl,66:$Vm,67:$Vn,68:$Vo,70:$Vp,76:$Vq,84:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,108:[1,307],109:66,110:$VC,111:$VD,112:$VE,113:$VF,114:$VG,115:$VH,116:$VI},{20:309,26:65,30:$Vk,35:$Vl,66:$Vm,67:$Vn,68:$Vo,70:$Vp,76:$Vq,84:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,109:66,110:$VC,111:$VD,112:$VE,113:$VF,114:$VG,115:$VH,116:$VI},{20:310,26:65,30:$Vk,35:$Vl,66:$Vm,67:$Vn,68:$Vo,70:$Vp,76:$Vq,84:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,109:66,110:$VC,111:$VD,112:$VE,113:$VF,114:$VG,115:$VH,116:$VI},{20:311,26:65,30:$Vk,35:$Vl,66:$Vm,67:$Vn,68:$Vo,70:$Vp,76:$Vq,84:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,109:66,110:$VC,111:$VD,112:$VE,113:$VF,114:$VG,115:$VH,116:$VI},o($V51,[2,135]),o($V51,[2,136]),o($V51,[2,137]),{29:[1,312],38:$Vr1},{20:254,26:65,28:$Vj1,30:$Vk,32:314,35:$Vl,66:$Vm,67:$Vn,68:$Vo,70:$Vp,76:$Vq,84:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,109:66,110:$VC,111:$VD,112:$VE,113:$VF,114:$VG,115:$VH,116:$VI},o($Vs1,[2,32],{74:$VR,75:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,94:$V21,95:$V31,101:$V41}),o($V51,[2,139]),{20:316,26:65,28:[1,315],30:$Vk,35:$Vl,66:$Vm,67:$Vn,68:$Vo,70:$Vp,76:$Vq,84:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,109:66,110:$VC,111:$VD,112:$VE,113:$VF,114:$VG,115:$VH,116:$VI},{2:$V0,4:317,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V1,18:$V2,19:$V3,21:16,22:17,23:18,24:19,25:20,26:21,27:23,30:$V4,40:$V5,47:$V6,48:$V7,49:$V8,55:$V9,59:$Va,63:$Vb,66:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh,73:$Vi},{42:[1,318]},{27:319,30:[1,320],66:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg},o($Vd1,[2,88]),{20:321,26:65,30:$Vk,35:$Vl,66:$Vm,67:$Vn,68:$Vo,70:$Vp,76:$Vq,84:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,109:66,110:$VC,111:$VD,112:$VE,113:$VF,114:$VG,115:$VH,116:$VI},{36:[1,322],74:$VR,75:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,94:$V21,95:$V31,101:$V41},{8:[1,323]},{8:[1,324],74:$VR,75:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,94:$V21,95:$V31,101:$V41},o($Vd1,[2,65],{74:$VR,75:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,94:$V21,95:$V31,101:$V41}),{2:$V0,4:325,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V1,18:$V2,19:$V3,21:16,22:17,23:18,24:19,25:20,26:21,27:23,30:$V4,40:$V5,47:$V6,48:$V7,49:$V8,55:$V9,59:$Va,63:$Vb,66:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh,73:$Vi},o($Vj,[2,49],{57:[1,326]}),{8:[1,327]},{8:[1,328]},{8:[1,329]},{8:[1,330]},o($Vt1,[2,55]),o($Vt1,[2,56]),o($Vt1,[2,57]),o($Vt1,[2,58]),{8:[1,331]},{28:$VJ,30:$VL,62:75},{28:$VK,30:$VL,31:$VM,33:[1,332],35:$VN,45:$VO,46:$VP,62:78},{8:[1,333],20:334,26:65,30:$Vk,35:$Vl,66:$Vm,67:$Vn,68:$Vo,70:$Vp,76:$Vq,84:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,109:66,110:$VC,111:$VD,112:$VE,113:$VF,114:$VG,115:$VH,116:$VI},{50:335,51:336,52:[1,337],54:$Vu1},{2:$V0,4:339,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V1,18:$V2,19:$V3,21:16,22:17,23:18,24:19,25:20,26:21,27:23,30:$V4,40:$V5,47:$V6,48:$V7,49:$V8,55:$V9,59:$Va,63:$Vb,66:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh,73:$Vi},{35:[1,340]},{8:[1,341],74:$VR,75:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,94:$V21,95:$V31,101:$V41},{8:[1,342],74:$VR,75:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,94:$V21,95:$V31,101:$V41},{2:$V0,4:343,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V1,18:$V2,19:$V3,21:16,22:17,23:18,24:19,25:20,26:21,27:23,30:$V4,40:$V5,47:$V6,48:$V7,49:$V8,55:$V9,59:$Va,63:$Vb,66:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh,73:$Vi},o($Vt1,[2,98]),o($Vd1,[2,100],{74:$VR,75:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,94:$V21,95:$V31,101:$V41}),o($Vt1,[2,99]),{2:$V0,4:344,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V1,18:$V2,19:$V3,21:16,22:17,23:18,24:19,25:20,26:21,27:23,30:$V4,40:$V5,47:$V6,48:$V7,49:$V8,55:$V9,59:$Va,63:$Vb,66:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh,73:$Vi},{2:$V0,4:345,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V1,18:$V2,19:$V3,21:16,22:17,23:18,24:19,25:20,26:21,27:23,30:$V4,40:$V5,47:$V6,48:$V7,49:$V8,55:$V9,59:$Va,63:$Vb,66:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh,73:$Vi},{42:[1,346]},o($Vj,[2,67]),{8:[1,347]},o($Vq1,[2,70]),o($Vq1,[2,73],{38:[1,348]}),o($Vq1,[2,75],{38:[1,349]}),o([8,29,36,38,42,53],[2,131],{74:$VR,75:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,94:$V21,95:$V31,101:$V41}),{36:[1,350],74:$VR,75:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,94:$V21,95:$V31,101:$V41},{36:[1,351],74:$VR,75:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,94:$V21,95:$V31,101:$V41},{38:[1,352],74:$VR,75:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,94:$V21,95:$V31,101:$V41},o($V51,[2,128]),o($V51,[2,129]),o($V51,[2,130]),o($V51,[2,146]),{29:[1,353]},{29:[1,354],74:$VR,75:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,94:$V21,95:$V31,101:$V41},{29:[1,355]},{29:[1,356],74:$VR,75:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,94:$V21,95:$V31,101:$V41},{36:[1,357],74:$VR,75:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,94:$V21,95:$V31,101:$V41},{36:[1,358],74:$VR,75:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,94:$V21,95:$V31,101:$V41},{36:[1,359],74:$VR,75:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,94:$V21,95:$V31,101:$V41},{36:[1,360]},{20:362,26:65,28:[1,361],30:$Vk,35:$Vl,66:$Vm,67:$Vn,68:$Vo,70:$Vp,76:$Vq,84:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,109:66,110:$VC,111:$VD,112:$VE,113:$VF,114:$VG,115:$VH,116:$VI},{29:[1,363],38:$Vr1},{20:254,26:65,28:$Vj1,30:$Vk,32:364,35:$Vl,66:$Vm,67:$Vn,68:$Vo,70:$Vp,76:$Vq,84:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,109:66,110:$VC,111:$VD,112:$VE,113:$VF,114:$VG,115:$VH,116:$VI},{8:[1,365],74:$VR,75:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,94:$V21,95:$V31,101:$V41},{2:$V0,6:40,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V1,18:$V2,19:$V3,21:16,22:17,23:18,24:19,25:20,26:21,27:23,30:$V4,40:$V5,43:[1,366],47:$V6,48:$V7,49:$V8,55:$V9,59:$Va,63:$Vb,66:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh,73:$Vi},{2:$V0,4:367,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V1,18:$V2,19:$V3,21:16,22:17,23:18,24:19,25:20,26:21,27:23,30:$V4,40:$V5,47:$V6,48:$V7,49:$V8,55:$V9,59:$Va,63:$Vb,66:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh,73:$Vi},{30:[1,368]},o($Vd1,[2,87]),{8:[1,369],74:$VR,75:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,94:$V21,95:$V31,101:$V41},{8:[1,370]},o($Vt1,[2,28]),o($Vj,[2,69]),{2:$V0,6:40,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V1,18:$V2,19:$V3,21:16,22:17,23:18,24:19,25:20,26:21,27:23,30:$V4,40:$V5,43:[1,371],47:$V6,48:$V7,49:$V8,55:$V9,59:$Va,63:$Vb,66:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh,73:$Vi},{7:268,9:269,17:$Vl1,18:$Vm1,19:$Vn1,21:273,22:274,23:275,26:276,27:277,30:$Vo1,39:272,56:372,66:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh,73:$Vi},o($Vt1,[2,51]),o($Vt1,[2,52]),o($Vt1,[2,53]),o($Vt1,[2,54]),o($Vt1,[2,59]),{34:$V91,37:$Va1},o($Vt1,[2,33]),{8:[1,373],74:$VR,75:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,94:$V21,95:$V31,101:$V41},{43:[1,375],51:374,52:[1,376],54:$Vu1},{43:[1,377]},{20:378,26:65,30:$Vk,35:$Vl,66:$Vm,67:$Vn,68:$Vo,70:$Vp,76:$Vq,84:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,109:66,110:$VC,111:$VD,112:$VE,113:$VF,114:$VG,115:$VH,116:$VI},{53:[1,379]},{2:$V0,6:40,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V1,18:$V2,19:$V3,21:16,22:17,23:18,24:19,25:20,26:21,27:23,30:$V4,40:$V5,43:[1,380],47:$V6,48:$V7,49:$V8,55:$V9,59:$Va,63:$Vb,66:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh,73:$Vi},{20:381,26:65,30:$Vk,35:$Vl,66:$Vm,67:$Vn,68:$Vo,70:$Vp,76:$Vq,84:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,109:66,110:$VC,111:$VD,112:$VE,113:$VF,114:$VG,115:$VH,116:$VI},{30:$Vv1,44:382},{30:$Vv1,44:384},{2:$V0,6:40,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V1,18:$V2,19:$V3,21:16,22:17,23:18,24:19,25:20,26:21,27:23,30:$V4,40:$V5,43:[1,385],47:$V6,48:$V7,49:$V8,55:$V9,59:$Va,63:$Vb,66:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh,73:$Vi},{2:$V0,6:40,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V1,18:$V2,19:$V3,21:16,22:17,23:18,24:19,25:20,26:21,27:23,30:$V4,40:$V5,43:[1,386],47:$V6,48:$V7,49:$V8,55:$V9,59:$Va,63:$Vb,66:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh,73:$Vi},{2:$V0,6:40,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V1,18:$V2,19:$V3,21:16,22:17,23:18,24:19,25:20,26:21,27:23,30:$V4,40:$V5,43:[1,387],47:$V6,48:$V7,49:$V8,55:$V9,59:$Va,63:$Vb,66:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh,73:$Vi},{2:$V0,4:388,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V1,18:$V2,19:$V3,21:16,22:17,23:18,24:19,25:20,26:21,27:23,30:$V4,40:$V5,47:$V6,48:$V7,49:$V8,55:$V9,59:$Va,63:$Vb,66:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh,73:$Vi},o($Vj,[2,68]),o($Vq1,[2,72]),o($Vq1,[2,74]),o($V51,[2,118]),o($V51,[2,126]),{20:389,26:65,30:$Vk,35:$Vl,66:$Vm,67:$Vn,68:$Vo,70:$Vp,76:$Vq,84:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,109:66,110:$VC,111:$VD,112:$VE,113:$VF,114:$VG,115:$VH,116:$VI},o($V51,[2,144]),o($V51,[2,145]),o($V51,[2,142]),o($V51,[2,143]),o($V51,[2,132]),o($V51,[2,133]),o($V51,[2,134]),o($V51,[2,138]),{20:254,26:65,28:$Vj1,30:$Vk,32:390,35:$Vl,66:$Vm,67:$Vn,68:$Vo,70:$Vp,76:$Vq,84:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,109:66,110:$VC,111:$VD,112:$VE,113:$VF,114:$VG,115:$VH,116:$VI},o($Vs1,[2,31],{74:$VR,75:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,94:$V21,95:$V31,101:$V41}),o($Vs1,[2,30]),{29:[1,391],38:$Vr1},o($Vt1,[2,25]),o($Vj,[2,84]),{2:$V0,6:40,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V1,18:$V2,19:$V3,21:16,22:17,23:18,24:19,25:20,26:21,27:23,30:$V4,40:$V5,43:[1,392],47:$V6,48:$V7,49:$V8,55:$V9,59:$Va,63:$Vb,66:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh,73:$Vi},o($Vd1,[2,86]),o($Vt1,[2,26]),o($Vt1,[2,27]),o($Vj,[2,60],{57:[1,393]}),o($Vj,[2,50]),o($Vt1,[2,34]),{43:[1,394]},o($Vj,[2,44]),{20:395,26:65,30:$Vk,35:$Vl,66:$Vm,67:$Vn,68:$Vo,70:$Vp,76:$Vq,84:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,109:66,110:$VC,111:$VD,112:$VE,113:$VF,114:$VG,115:$VH,116:$VI},o($Vj,[2,45]),{53:[1,396],74:$VR,75:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,94:$V21,95:$V31,101:$V41},{2:$V0,4:397,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V1,18:$V2,19:$V3,21:16,22:17,23:18,24:19,25:20,26:21,27:23,30:$V4,40:$V5,47:$V6,48:$V7,49:$V8,55:$V9,59:$Va,63:$Vb,66:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh,73:$Vi},o($Vj,[2,42]),{36:[1,398],74:$VR,75:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,94:$V21,95:$V31,101:$V41},{36:[1,399]},{31:[1,400],45:[1,401],46:[1,402]},{36:[1,403]},o($Vj,[2,35]),o($Vj,[2,81]),o($Vj,[2,82]),{2:$V0,6:40,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V1,18:$V2,19:$V3,21:16,22:17,23:18,24:19,25:20,26:21,27:23,30:$V4,40:$V5,43:[1,404],47:$V6,48:$V7,49:$V8,55:$V9,59:$Va,63:$Vb,66:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh,73:$Vi},{36:[1,405],74:$VR,75:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,94:$V21,95:$V31,101:$V41},{29:[1,406],38:$Vr1},{8:[1,407]},o($Vj,[2,85]),{10:409,42:[1,408],55:[1,410]},o($Vj,[2,43]),{53:[1,411],74:$VR,75:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,94:$V21,95:$V31,101:$V41},{2:$V0,4:412,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V1,18:$V2,19:$V3,21:16,22:17,23:18,24:19,25:20,26:21,27:23,30:$V4,40:$V5,47:$V6,48:$V7,49:$V8,55:$V9,59:$Va,63:$Vb,66:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh,73:$Vi},{2:$V0,6:40,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V1,18:$V2,19:$V3,21:16,22:17,23:18,24:19,25:20,26:21,27:23,30:$V4,40:$V5,43:[2,48],47:$V6,48:$V7,49:$V8,55:$V9,59:$Va,63:$Vb,66:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh,73:$Vi},{8:[1,413]},{42:[1,414]},{20:415,26:65,30:$Vk,35:$Vl,66:$Vm,67:$Vn,68:$Vo,70:$Vp,76:$Vq,84:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,109:66,110:$VC,111:$VD,112:$VE,113:$VF,114:$VG,115:$VH,116:$VI},{36:[2,39]},{36:[2,40]},{42:[1,416]},o($Vj,[2,83]),o($V51,[2,127]),o($Vs1,[2,29]),o($Vt1,[2,24]),{2:$V0,4:417,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V1,18:$V2,19:$V3,21:16,22:17,23:18,24:19,25:20,26:21,27:23,30:$V4,40:$V5,47:$V6,48:$V7,49:$V8,55:$V9,59:$Va,63:$Vb,66:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh,73:$Vi},o($Vj,[2,62]),{35:[1,418]},{2:$V0,4:419,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V1,18:$V2,19:$V3,21:16,22:17,23:18,24:19,25:20,26:21,27:23,30:$V4,40:$V5,47:$V6,48:$V7,49:$V8,55:$V9,59:$Va,63:$Vb,66:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh,73:$Vi},o($Vw1,[2,47],{7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,21:16,22:17,23:18,24:19,25:20,26:21,27:23,6:40,2:$V0,17:$V1,18:$V2,19:$V3,30:$V4,40:$V5,47:$V6,48:$V7,49:$V8,55:$V9,59:$Va,63:$Vb,66:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh,73:$Vi}),o($Vj,[2,41]),{2:$V0,4:420,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V1,18:$V2,19:$V3,21:16,22:17,23:18,24:19,25:20,26:21,27:23,30:$V4,40:$V5,47:$V6,48:$V7,49:$V8,55:$V9,59:$Va,63:$Vb,66:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh,73:$Vi},{36:[2,38],74:$VR,75:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,94:$V21,95:$V31,101:$V41},{2:$V0,4:421,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V1,18:$V2,19:$V3,21:16,22:17,23:18,24:19,25:20,26:21,27:23,30:$V4,40:$V5,47:$V6,48:$V7,49:$V8,55:$V9,59:$Va,63:$Vb,66:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh,73:$Vi},{2:$V0,6:40,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V1,18:$V2,19:$V3,21:16,22:17,23:18,24:19,25:20,26:21,27:23,30:$V4,40:$V5,43:[1,422],47:$V6,48:$V7,49:$V8,55:$V9,59:$Va,63:$Vb,66:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh,73:$Vi},{20:423,26:65,30:$Vk,35:$Vl,66:$Vm,67:$Vn,68:$Vo,70:$Vp,76:$Vq,84:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,103:$Vy,104:$Vz,105:$VA,106:$VB,109:66,110:$VC,111:$VD,112:$VE,113:$VF,114:$VG,115:$VH,116:$VI},o($Vw1,[2,46],{7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,21:16,22:17,23:18,24:19,25:20,26:21,27:23,6:40,2:$V0,17:$V1,18:$V2,19:$V3,30:$V4,40:$V5,47:$V6,48:$V7,49:$V8,55:$V9,59:$Va,63:$Vb,66:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh,73:$Vi}),{2:$V0,6:40,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V1,18:$V2,19:$V3,21:16,22:17,23:18,24:19,25:20,26:21,27:23,30:$V4,40:$V5,43:[1,424],47:$V6,48:$V7,49:$V8,55:$V9,59:$Va,63:$Vb,66:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh,73:$Vi},{2:$V0,6:40,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V1,18:$V2,19:$V3,21:16,22:17,23:18,24:19,25:20,26:21,27:23,30:$V4,40:$V5,43:[1,425],47:$V6,48:$V7,49:$V8,55:$V9,59:$Va,63:$Vb,66:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh,73:$Vi},o($Vj,[2,61]),{36:[1,426],74:$VR,75:$VS,77:$VT,78:$VU,79:$VV,80:$VW,81:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,86:$V01,87:$V11,94:$V21,95:$V31,101:$V41},o($Vj,[2,36]),o($Vj,[2,37]),{42:$Vp1}],
defaultActions: {39:[2,1],75:[2,76],78:[2,77],80:[2,79],81:[2,80],205:[2,97],401:[2,39],402:[2,40]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};


    // importaciones
    // import principal from './traducciones/encabezados.js';

    // consla para responder con condigo de 3D
    var consola = '';


    // contador para manejo de Teomporales Tn
    // var contador = 0 ;
    var contador = 5;

    // contador para manejar etiquetas
    var etiquetas = 0;

    // puntero externo para saber donde esta el valor del id en la pila 
    var punteroStack = 0;
    var punteroStackTemporal = 0;

    // puntero externo para tener control sobre la pila heap
    var punteroHeap = 0;
            

    // listado de variable-identificador
    var listado = [];
    function addList(id,value){
        return {
            id: id,
            value: value
        }
    }

    // estructura para guardado de variables
    var variables = [];
    function addVariables(id,value,posicion){
        return {
            id: id,
            value: value,
            posicion: posicion
        }
    }

    // 
    var listadoDeclaraciones = [];
 
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/*Se ignoran los comentarios*/
break;
case 1:/*Se ignoran los comentarios multilinea*/
break;
case 2:console.log("Reconocio: " + yy_.yytext); return 45;
break;
case 3:console.log("Reconocio: " + yy_.yytext); return 46;
break;
case 4:console.log("Reconocio: " + yy_.yytext); return 28;
break;
case 5:console.log("Reconocio: " + yy_.yytext); return 29;
break;
case 6:console.log("Reconocio: " + yy_.yytext); return 35;
break;
case 7:console.log("Reconocio: " + yy_.yytext); return 36;
break;
case 8:console.log("Reconocio: " + yy_.yytext); return 101;
break;
case 9:console.log("Reconocio: " + yy_.yytext); return 53;
break;
case 10:console.log("Reconocio: " + yy_.yytext); return 38;
break;
case 11:console.log("Reconocio: " + yy_.yytext); return 33;
break;
case 12:console.log("Reconocio: " + yy_.yytext); return 85;
break;
case 13:console.log("Reconocio: " + yy_.yytext); return 86;
break;
case 14:console.log("Reconocio: " + yy_.yytext); return 84;
break;
case 15:console.log("Reconocio: " + yy_.yytext); return 83;
break;
case 16:console.log("Reconocio: " + yy_.yytext); return 95;
break;
case 17:console.log("Reconocio: " + yy_.yytext); return 106;
break;
case 18:console.log("Reconocio: " + yy_.yytext); return 'sim_Dolar';
break;
case 19:console.log("Reconocio: " + yy_.yytext); return 87;
break;
case 20:console.log("Reconocio: " + yy_.yytext); return 77;
break;
case 21:console.log("Reconocio: " + yy_.yytext); return 31;
break;
case 22:console.log("Reconocio: " + yy_.yytext); return 78;
break;
case 23:console.log("Reconocio: " + yy_.yytext); return 80;
break;
case 24:console.log("Reconocio: " + yy_.yytext); return 79;
break;
case 25:console.log("Reconocio: " + yy_.yytext); return 82;
break;
case 26:console.log("Reconocio: " + yy_.yytext); return 81;
break;
case 27:console.log("Reconocio: " + yy_.yytext); return 74;
break;
case 28:console.log("Reconocio: " + yy_.yytext); return 75;
break;
case 29:console.log("Reconocio: " + yy_.yytext); return 76;
break;
case 30:console.log("Reconocio: " + yy_.yytext); return 94;
break;
case 31:console.log("Reconocio: " + yy_.yytext); return 116;
break;
case 32:console.log("Reconocio: " + yy_.yytext); return 66;
break;
case 33:console.log("Reconocio: " + yy_.yytext); return 67;
break;
case 34:console.log("Reconocio: " + yy_.yytext); return 68;
break;
case 35:console.log("Reconocio: " + yy_.yytext); return 69;
break;
case 36:console.log("Reconocio: " + yy_.yytext); return 70;
break;
case 37:console.log("Reconocio: " + yy_.yytext); return 63;
break;
case 38:console.log("Reconocio: " + yy_.yytext); return 114;
break;
case 39:console.log("Reconocio: " + yy_.yytext); return 115;
break;
case 40:console.log("Reconocio: " + yy_.yytext); return 88;
break;
case 41:console.log("Reconocio: " + yy_.yytext); return 89;
break;
case 42:console.log("Reconocio: " + yy_.yytext); return 90;
break;
case 43:console.log("Reconocio: " + yy_.yytext); return 91;
break;
case 44:console.log("Reconocio: " + yy_.yytext); return 92;
break;
case 45:console.log("Reconocio: " + yy_.yytext); return 93;
break;
case 46:console.log("Reconocio: " + yy_.yytext); return 96;
break;
case 47:console.log("Reconocio: " + yy_.yytext); return 97;
break;
case 48:console.log("Reconocio: " + yy_.yytext); return 98;
break;
case 49:console.log("Reconocio: " + yy_.yytext); return 99;
break;
case 50:console.log("Reconocio: " + yy_.yytext); return 100;
break;
case 51:console.log("Reconocio: " + yy_.yytext); return 55;
break;
case 52:console.log("Reconocio: " + yy_.yytext); return 57;
break;
case 53:console.log("Reconocio: " + yy_.yytext); return 49;
break;
case 54:console.log("Reconocio: " + yy_.yytext); return 52;
break;
case 55:console.log("Reconocio: " + yy_.yytext); return 54;
break;
case 56:console.log("Reconocio: " + yy_.yytext); return 47;
break;
case 57:console.log("Reconocio: " + yy_.yytext); return 48;
break;
case 58:console.log("Reconocio: " + yy_.yytext); return 40;
break;
case 59:console.log("Reconocio: " + yy_.yytext); return 41;
break;
case 60:console.log("Reconocio: " + yy_.yytext); return 17;
break;
case 61:console.log("Reconocio: " + yy_.yytext); return 18;
break;
case 62:console.log("Reconocio: " + yy_.yytext); return 19;
break;
case 63:console.log("Reconocio: " + yy_.yytext); return 71;
break;
case 64:console.log("Reconocio: " + yy_.yytext); return 73;
break;
case 65:console.log("Reconocio: " + yy_.yytext); return 59;
break;
case 66:console.log("Reconocio: " + yy_.yytext); return 102;
break;
case 67:console.log("Reconocio: " + yy_.yytext); return 103;
break;
case 68:console.log("Reconocio: " + yy_.yytext); return 104;
break;
case 69:console.log("Reconocio: " + yy_.yytext); return 105;
break;
case 70:console.log("Reconocio: " + yy_.yytext); return 107;
break;
case 71:console.log("Reconocio: " + yy_.yytext); return 108;
break;
case 72:console.log("Reconocio: " + yy_.yytext); return 34;
break;
case 73:console.log("Reconocio: " + yy_.yytext); return 37;
break;
case 74:console.log("Reconocio: " + yy_.yytext); return 64;
break;
case 75:console.log("Reconocio: " + yy_.yytext); return 8;
break;
case 76:console.log("Reconocio: " + yy_.yytext); return 42;
break;
case 77:console.log("Reconocio: " + yy_.yytext); return 43;
break;
case 78:console.log("Reconocio: " + yy_.yytext); return 111;
break;
case 79:console.log("Reconocio: " + yy_.yytext); return 110;
break;
case 80:console.log("Reconocio: " + yy_.yytext); return 30;
break;
case 81:console.log("Reconocio: " + yy_.yytext); return 112;
break;
case 82:console.log("Reconocio: " + yy_.yytext); return 113;
break;
case 83:/*Se ignoran los espacios*/
break;
case 84:return 5
break;
case 85:
                                            console.log("Error Lexico: " + yy_.yytext + ", linea: " + (yy_.yylineno + 1) + ", columna: " + (yy_.yylloc.last_column + 1));
                                            new errores.default("LEXICO", "El caracter " + yy_.yytext + " no es parte del lenguaje", yy_.yylineno + 1, yy_.yylloc.last_column + 1);
                                            
break;
}
},
rules: [/^(?:\/\/.*)/i,/^(?:\/\*((\*+[^/*])|([^*]))*\**\*\/)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\()/i,/^(?:\))/i,/^(?:\?)/i,/^(?::)/i,/^(?:,)/i,/^(?:\.)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:-)/i,/^(?:\+)/i,/^(?:\^)/i,/^(?:#)/i,/^(?:\$)/i,/^(?:%)/i,/^(?:==)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:&)/i,/^(?:null\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:void\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:pow\b)/i,/^(?:sin\b)/i,/^(?:log10\b)/i,/^(?:cos\b)/i,/^(?:tan\b)/i,/^(?:sqrt\b)/i,/^(?:caracterOfPosition\b)/i,/^(?:subString\b)/i,/^(?:length\b)/i,/^(?:toUppercase\b)/i,/^(?:toLowercase\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:do\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:in\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:print\b)/i,/^(?:println\b)/i,/^(?:struct\b)/i,/^(?:parse\b)/i,/^(?:toint\b)/i,/^(?:todouble\b)/i,/^(?:typeof\b)/i,/^(?:begin\b)/i,/^(?:end\b)/i,/^(?:push\b)/i,/^(?:pop\b)/i,/^(?:main\b)/i,/^(?:;)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:([0-9]+(\.[0-9]+)\b))/i,/^(?:([0-9]+))/i,/^(?:([a-zñA-ZÑ_][a-zA-Z0-9Ññ_]*))/i,/^(?:(("((\\([\'\"\\ntr]))|([^\"\\]+))*")))/i,/^(?:(('((\\([\\ntr]))|([^\'\\]))')))/i,/^(?:[\s\r\n\t])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = traductor;
exports.Parser = traductor.Parser;
exports.parse = function () { return traductor.parse.apply(traductor, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}