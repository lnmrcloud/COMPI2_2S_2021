/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,6],$V1=[1,13],$V2=[1,12],$V3=[1,18],$V4=[1,19],$V5=[1,20],$V6=[1,21],$V7=[1,22],$V8=[1,23],$V9=[1,14],$Va=[1,15],$Vb=[1,16],$Vc=[5,9,15,20,34,35,36,37,38,39,52,56,62],$Vd=[1,26],$Ve=[1,28],$Vf=[1,29],$Vg=[1,31],$Vh=[15,24,29,46],$Vi=[1,44],$Vj=[1,55],$Vk=[1,57],$Vl=[1,58],$Vm=[1,59],$Vn=[1,60],$Vo=[1,61],$Vp=[1,42],$Vq=[1,43],$Vr=[1,45],$Vs=[1,46],$Vt=[1,47],$Vu=[1,48],$Vv=[1,49],$Vw=[1,50],$Vx=[1,51],$Vy=[1,62],$Vz=[5,9,15,20,23,31,34,35,36,37,38,39,41,43,48,49,50,51,52,54,56,59,61,62,64,66,77,79,80,83,98,99,100,101,102,103,104,105],$VA=[1,73],$VB=[1,78],$VC=[1,75],$VD=[1,76],$VE=[1,77],$VF=[1,79],$VG=[1,80],$VH=[1,81],$VI=[1,82],$VJ=[1,83],$VK=[1,84],$VL=[1,85],$VM=[1,86],$VN=[1,87],$VO=[1,88],$VP=[1,89],$VQ=[1,90],$VR=[1,91],$VS=[1,92],$VT=[18,25,27,32,60,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,107,108,109],$VU=[2,104],$VV=[1,96],$VW=[1,95],$VX=[2,119],$VY=[1,99],$VZ=[23,27],$V_=[18,25,27,32,60,81,82,83,84,85,86,87,89,90,91,92,93,94,95,96,97,107],$V$=[1,154],$V01=[1,149],$V11=[1,155],$V21=[1,156],$V31=[18,25,27,32,60,81,82,83,84,86,90,91,92,93,94,95,96,97,107],$V41=[18,25,27,32,60,81,82],$V51=[18,25,27,32,60,81,82,90,91,92,93,94,95,96,97,107],$V61=[1,166],$V71=[25,27,32],$V81=[1,190],$V91=[1,191],$Va1=[1,192],$Vb1=[1,186],$Vc1=[1,187],$Vd1=[5,9,15,20,23,31,34,35,36,37,38,39,41,43,48,49,50,51,52,56,59,61,62,64,66,77,79,80,83,98,99,100,101,102,103,104,105],$Ve1=[1,197],$Vf1=[1,202],$Vg1=[1,203],$Vh1=[15,20,23,31,34,35,36,37,38,39,41,43,48,49,50,51,52,56,59,61,62,64,66,77,79,80,83,98,99,100,101,102,103,104,105],$Vi1=[81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,107,108,109],$Vj1=[23,59,61],$Vk1=[1,244],$Vl1=[27,32],$Vm1=[18,32];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"START":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"DECLARACION":7,"ASIGNACION":8,"IMPREESION":9,"FUNCIONES":10,"CONDICIONAL_IF":11,"SWITCH":12,"WHILE":13,"TIPO":14,"NAME":15,"RASIGNACION":16,"EXPRESION":17,"RPUNTOYCOMA":18,"LISTA_DE_DECLARACION":19,"RSTRUCT":20,"RIZQLLAVE":21,"LISTA_DE_ATRIBUTOS":22,"RDERLLAVE":23,"RIZQCORCHETE":24,"RDERCORCHETE":25,"CUERPO_ARRAY":26,"RCOMA":27,"ATRIBUTO":28,"LISTA_DE_DECLARACIONES":29,"LISTA_DE_PARAMETROS":30,"RIZQPARENTESIS":31,"RDERPARENTESIS":32,"TIPO_PRIMITIVO":33,"RINT":34,"RDOUBLE":35,"RSTRING_TIPO":36,"RBOOLEAN":37,"RCHAR":38,"RVOID":39,"IMPRESION":40,"RPRINTLN":41,"LISTA_IMPRESION":42,"RPRINT":43,"LLAMADA":44,"NATIVAS":45,"RPUNTO":46,"RPARSE":47,"RTOINT":48,"RTODOUBLE":49,"RSTRING_CAST":50,"RTYPEOF":51,"RIF":52,"BLOQUE_INSTRUCCIONES":53,"RELSE":54,"INSTRUCCIONES_INTERNAS":55,"RSWITCH":56,"BLOQUE_SWITCH":57,"ESTRUCTURA_CASE":58,"RCASE":59,"RDOSPUNTOS":60,"RDEFAULT":61,"RWHILE":62,"DO_WHILE":63,"RDO":64,"FOR":65,"RFOR":66,"DECLARAR_ASIGNACION":67,"LISTA_DE_ATRIBUTOSRDERPARENTESIS":68,"RIZQLLAVEINSTRUCCIONES_INTERNAS":69,"TIPO_FUNCION_ATRIBUTO":70,"RPOW":71,"RSQRT":72,"RSIN":73,"RCOS":74,"RTAN":75,"FUNCION_ARITMETICA":76,"TIPO_FUNCION_ARITMETICA":77,"INSTRUCCION_INTERNA":78,"RRETURN":79,"RBREAK":80,"RINCREMENTORPUNTOYCOMA":81,"RDECREMENTORPUNTOYCOMA":82,"RRESTA":83,"RAMPERSON":84,"RPOTENCIA":85,"RSUMA":86,"RMULTIPLICACION":87,"RDIVISION":88,"RMODULAR":89,"RMENORQUE":90,"RMAYORQUE":91,"RMENORQUEIGUAL":92,"RMAYORQUEIGUAL":93,"RIGUALDAD":94,"RDIFERENCIA":95,"RAND":96,"ROR":97,"RNOT":98,"ENTERO":99,"DECIMAL":100,"RTRUE":101,"RFALSE":102,"CADENA":103,"CARACTER":104,"RNULL":105,"LISTA_DE_PARAMETROSRDERPARENTESIS":106,"RTERNARIO":107,"RINCREMENTO":108,"RDECREMENTO":109,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"IMPREESION",15:"NAME",16:"RASIGNACION",18:"RPUNTOYCOMA",20:"RSTRUCT",21:"RIZQLLAVE",23:"RDERLLAVE",24:"RIZQCORCHETE",25:"RDERCORCHETE",27:"RCOMA",29:"LISTA_DE_DECLARACIONES",31:"RIZQPARENTESIS",32:"RDERPARENTESIS",34:"RINT",35:"RDOUBLE",36:"RSTRING_TIPO",37:"RBOOLEAN",38:"RCHAR",39:"RVOID",41:"RPRINTLN",43:"RPRINT",46:"RPUNTO",47:"RPARSE",48:"RTOINT",49:"RTODOUBLE",50:"RSTRING_CAST",51:"RTYPEOF",52:"RIF",54:"RELSE",56:"RSWITCH",59:"RCASE",60:"RDOSPUNTOS",61:"RDEFAULT",62:"RWHILE",64:"RDO",66:"RFOR",68:"LISTA_DE_ATRIBUTOSRDERPARENTESIS",69:"RIZQLLAVEINSTRUCCIONES_INTERNAS",71:"RPOW",72:"RSQRT",73:"RSIN",74:"RCOS",75:"RTAN",77:"TIPO_FUNCION_ARITMETICA",79:"RRETURN",80:"RBREAK",81:"RINCREMENTORPUNTOYCOMA",82:"RDECREMENTORPUNTOYCOMA",83:"RRESTA",84:"RAMPERSON",85:"RPOTENCIA",86:"RSUMA",87:"RMULTIPLICACION",88:"RDIVISION",89:"RMODULAR",90:"RMENORQUE",91:"RMAYORQUE",92:"RMENORQUEIGUAL",93:"RMAYORQUEIGUAL",94:"RIGUALDAD",95:"RDIFERENCIA",96:"RAND",97:"ROR",98:"RNOT",99:"ENTERO",100:"DECIMAL",101:"RTRUE",102:"RFALSE",103:"CADENA",104:"CARACTER",105:"RNULL",106:"LISTA_DE_PARAMETROSRDERPARENTESIS",107:"RTERNARIO",108:"RINCREMENTO",109:"RDECREMENTO"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[7,5],[7,3],[7,6],[7,7],[22,3],[22,1],[28,2],[28,2],[19,3],[19,1],[26,3],[8,4],[8,8],[14,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[40,5],[40,5],[42,3],[42,1],[44,4],[44,3],[30,3],[30,1],[45,6],[45,4],[45,4],[45,4],[45,4],[11,5],[11,7],[11,7],[53,3],[53,1],[53,1],[53,1],[53,2],[12,7],[57,2],[57,1],[58,4],[58,4],[13,7],[63,9],[65,11],[67,4],[67,3],[67,1],[10,7],[10,6],[70,1],[70,1],[70,1],[70,1],[70,1],[76,4],[55,2],[55,1],[78,1],[78,1],[78,1],[78,2],[78,1],[78,1],[78,1],[78,1],[78,1],[78,2],[78,3],[78,2],[78,2],[78,2],[17,2],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,2],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,5],[17,5],[17,5],[17,6],[17,5],[17,2],[17,2],[17,1],[17,1],[17,1],[17,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return new AST($$[$0-1]);
break;
case 2: case 53: case 71:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 3: case 34: case 54: case 72:
 this.$ = [$$[$0]]; 
break;
case 4: case 5: case 6: case 8: case 9: case 10: case 24: case 73: case 74: case 75: case 77: case 78:
 this.$ = $$[$0] 
break;
case 11:
 this.$ = new Declaracion([$$[$0-3]],$$[$0-4], _$[$0-4].first_line, _$[$0-4].first_column,$$[$0-1]); 
break;
case 12:
 this.$ = new Declaracion($$[$0-1], $$[$0-2], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 19:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 20:
 this.$ = [$$[$0]] 
break;
case 22:
 this.$ = new Asignacion($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 25: case 26:
 this.$ =  Tipo.INT;
break;
case 27:
 this.$ =  Tipo.STRING;
break;
case 28:
 this.$ =  Tipo.BOOL;
break;
case 29:
 this.$ =  Tipo.CHAR;
break;
case 30:
 this.$ =  Tipo.VOID;
break;
case 32:
 this.$ = new Print($$[$0-2], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 33:
 $$[$0-2].push($$[$0-1]); this.$ = $$[$0-2];
break;
case 44:
 this.$ = new If($$[$0-2], $$[$0], [],[], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 45:
 this.$ = new If($$[$0-4], $$[$0-2], [],[$$[$0]], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 46:
 this.$ = new If($$[$0-4], $$[$0-2], $$[$0],[], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 47: case 122:
 this.$ = $$[$0-1] 
break;
case 52:
 this.$ = new Switch($$[$0-4],$$[$0-1],_$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 55:
 this.$ = new Case($$[$0-2],$$[$0],_$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 56:
 this.$ = new Case([],$$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column,true); 
break;
case 57:
 this.$ = new While($$[$0-4],$$[$0-1],_$[$0-6].first_line, _$[$0-6].first_colum); 
break;
case 84:
 this.$ = new Break(_$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 87:
 this.$ = new Operacion($$[$0],$$[$0],Operador.MENOS_UNARIO, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 88:
 this.$ = new Operacion($$[$0-2],$$[$0],Operador.CONCATENACION, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 89:
 this.$ = new Operacion($$[$0-2],$$[$0],Operador.REPETICION, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 90:
 this.$ = new Operacion($$[$0-2],$$[$0],Operador.SUMA, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 91:
 this.$ = new Operacion($$[$0-2],$$[$0],Operador.RESTA, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 92:
 this.$ = new Operacion($$[$0-2],$$[$0],Operador.MULTIPLICACION, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 93:
 this.$ = new Operacion($$[$0-2],$$[$0],Operador.DIVISION, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 94:
 this.$ = new Operacion($$[$0-2],$$[$0],Operador.MODULO, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 95:
 this.$ = new Operacion($$[$0-2],$$[$0],Operador.MENOR_QUE, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 96:
 this.$ = new Operacion($$[$0-2],$$[$0],Operador.MAYOR_QUE, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 97:
 this.$ = new Operacion($$[$0-2],$$[$0],Operador.MENOR_IGUA_QUE, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 98:
 this.$ = new Operacion($$[$0-2],$$[$0],Operador.MAYOR_IGUA_QUE, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 99:
 this.$ = new Operacion($$[$0-2],$$[$0],Operador.IGUAL_IGUAL, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 100:
 this.$ = new Operacion($$[$0-2],$$[$0],Operador.DIFERENTE_QUE, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 101:
 this.$ = new Operacion($$[$0-2],$$[$0],Operador.AND, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 102:
 this.$ = new Operacion($$[$0-2],$$[$0],Operador.OR, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 103:
 this.$ = new Operacion($$[$0],$$[$0],Operador.NOT, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 104:
 this.$ = new AccesoVariable($$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 105: case 106:
 this.$ = new Primitivo(Number($$[$0]), this._$.first_line, this._$.first_column); 
break;
case 107:
 this.$ = new Primitivo(true,  this._$.first_line, this._$.first_column); 
break;
case 108:
 this.$ = new Primitivo(false, this._$.first_line, this._$.first_column); 
break;
case 109: case 110:
 this.$ = new Primitivo($$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 111:
 this.$ = new Primitivo(null, _$[$0].first_line, _$[$0].first_column); 
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:$V0,10:7,11:8,12:9,13:10,14:11,15:$V1,20:$V2,33:17,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,52:$V9,56:$Va,62:$Vb},{1:[3]},{5:[1,24],6:25,7:4,8:5,9:$V0,10:7,11:8,12:9,13:10,14:11,15:$V1,20:$V2,33:17,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,52:$V9,56:$Va,62:$Vb},o($Vc,[2,3]),o($Vc,[2,4]),o($Vc,[2,5]),o($Vc,[2,6]),o($Vc,[2,7]),o($Vc,[2,8]),o($Vc,[2,9]),o($Vc,[2,10]),{15:$Vd,19:27,24:$Ve,29:$Vf},{15:[1,30]},{15:[1,32],16:$Vg},{31:[1,33]},{31:[1,34]},{31:[1,35]},o($Vh,[2,24]),o($Vh,[2,25]),o($Vh,[2,26]),o($Vh,[2,27]),o($Vh,[2,28]),o($Vh,[2,29]),o($Vh,[2,30]),{1:[2,1]},o($Vc,[2,2]),{16:[1,36],18:[2,20]},{18:[1,37]},{25:[1,38]},{27:[1,39]},{21:[1,40]},{14:56,15:$Vi,17:41,31:$Vj,33:17,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,44:52,45:53,48:$Vk,49:$Vl,50:$Vm,51:$Vn,76:54,77:$Vo,83:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},{16:$Vy,31:[1,63]},{14:56,15:$Vi,17:64,31:$Vj,33:17,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,44:52,45:53,48:$Vk,49:$Vl,50:$Vm,51:$Vn,76:54,77:$Vo,83:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},{14:56,15:$Vi,17:65,31:$Vj,33:17,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,44:52,45:53,48:$Vk,49:$Vl,50:$Vm,51:$Vn,76:54,77:$Vo,83:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},{14:56,15:$Vi,17:66,31:$Vj,33:17,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,44:52,45:53,48:$Vk,49:$Vl,50:$Vm,51:$Vn,76:54,77:$Vo,83:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},{14:56,15:$Vi,17:67,31:$Vj,33:17,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,44:52,45:53,48:$Vk,49:$Vl,50:$Vm,51:$Vn,76:54,77:$Vo,83:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},o($Vz,[2,12]),{15:[1,68]},{15:[1,69]},{14:72,15:$VA,22:70,28:71,33:17,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8},{18:[1,74],83:$VB,84:$VC,85:$VD,86:$VE,87:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,107:$VQ,108:$VR,109:$VS},{14:56,15:$Vi,17:93,31:$Vj,33:17,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,44:52,45:53,48:$Vk,49:$Vl,50:$Vm,51:$Vn,76:54,77:$Vo,83:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},{14:56,15:$Vi,17:94,31:$Vj,33:17,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,44:52,45:53,48:$Vk,49:$Vl,50:$Vm,51:$Vn,76:54,77:$Vo,83:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},o($VT,$VU,{31:$VV,46:$VW}),o($VT,[2,105]),o($VT,[2,106]),o($VT,[2,107]),o($VT,[2,108]),o($VT,[2,109],{46:[1,97]}),o($VT,[2,110]),o($VT,[2,111]),o($VT,$VX),o($VT,[2,120]),o($VT,[2,121]),{14:56,15:$Vi,17:98,31:$Vj,33:17,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,44:52,45:53,48:$Vk,49:$Vl,50:$Vm,51:$Vn,76:54,77:$Vo,83:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},{46:$VY},{31:[1,100]},{31:[1,101]},{31:[1,102]},{31:[1,103]},{31:[1,104]},{15:[1,105]},{32:[1,106],68:[1,107]},{32:[1,108],83:$VB,84:$VC,85:$VD,86:$VE,87:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,107:$VQ,108:$VR,109:$VS},{32:[1,109],83:$VB,84:$VC,85:$VD,86:$VE,87:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,107:$VQ,108:$VR,109:$VS},{32:[1,110],83:$VB,84:$VC,85:$VD,86:$VE,87:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,107:$VQ,108:$VR,109:$VS},{18:[1,111],83:$VB,84:$VC,85:$VD,86:$VE,87:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,107:$VQ,108:$VR,109:$VS},{16:[1,112]},{18:[2,19]},{23:[1,113],27:[1,114]},o($VZ,[2,16]),{15:[1,115]},{15:[1,116]},o($Vz,[2,22]),{14:56,15:$Vi,17:117,31:$Vj,33:17,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,44:52,45:53,48:$Vk,49:$Vl,50:$Vm,51:$Vn,76:54,77:$Vo,83:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},{14:56,15:$Vi,17:118,31:$Vj,33:17,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,44:52,45:53,48:$Vk,49:$Vl,50:$Vm,51:$Vn,76:54,77:$Vo,83:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},{14:56,15:$Vi,17:119,31:$Vj,33:17,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,44:52,45:53,48:$Vk,49:$Vl,50:$Vm,51:$Vn,76:54,77:$Vo,83:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},{14:56,15:$Vi,17:120,31:$Vj,33:17,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,44:52,45:53,48:$Vk,49:$Vl,50:$Vm,51:$Vn,76:54,77:$Vo,83:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},{14:56,15:$Vi,17:121,31:$Vj,33:17,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,44:52,45:53,48:$Vk,49:$Vl,50:$Vm,51:$Vn,76:54,77:$Vo,83:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},{14:56,15:$Vi,17:122,31:$Vj,33:17,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,44:52,45:53,48:$Vk,49:$Vl,50:$Vm,51:$Vn,76:54,77:$Vo,83:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},{14:56,15:$Vi,17:123,31:$Vj,33:17,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,44:52,45:53,48:$Vk,49:$Vl,50:$Vm,51:$Vn,76:54,77:$Vo,83:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},{14:56,15:$Vi,17:124,31:$Vj,33:17,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,44:52,45:53,48:$Vk,49:$Vl,50:$Vm,51:$Vn,76:54,77:$Vo,83:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},{14:56,15:$Vi,17:125,31:$Vj,33:17,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,44:52,45:53,48:$Vk,49:$Vl,50:$Vm,51:$Vn,76:54,77:$Vo,83:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},{14:56,15:$Vi,17:126,31:$Vj,33:17,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,44:52,45:53,48:$Vk,49:$Vl,50:$Vm,51:$Vn,76:54,77:$Vo,83:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},{14:56,15:$Vi,17:127,31:$Vj,33:17,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,44:52,45:53,48:$Vk,49:$Vl,50:$Vm,51:$Vn,76:54,77:$Vo,83:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},{14:56,15:$Vi,17:128,31:$Vj,33:17,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,44:52,45:53,48:$Vk,49:$Vl,50:$Vm,51:$Vn,76:54,77:$Vo,83:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},{14:56,15:$Vi,17:129,31:$Vj,33:17,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,44:52,45:53,48:$Vk,49:$Vl,50:$Vm,51:$Vn,76:54,77:$Vo,83:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},{14:56,15:$Vi,17:130,31:$Vj,33:17,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,44:52,45:53,48:$Vk,49:$Vl,50:$Vm,51:$Vn,76:54,77:$Vo,83:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},{14:56,15:$Vi,17:131,31:$Vj,33:17,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,44:52,45:53,48:$Vk,49:$Vl,50:$Vm,51:$Vn,76:54,77:$Vo,83:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},{14:56,15:$Vi,17:132,31:$Vj,33:17,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,44:52,45:53,48:$Vk,49:$Vl,50:$Vm,51:$Vn,76:54,77:$Vo,83:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},o($VT,[2,117]),o($VT,[2,118]),o($V_,[2,87],{88:$VG,108:$VR,109:$VS}),o($V_,[2,103],{88:$VG,108:$VR,109:$VS}),{15:[1,133]},{14:56,15:$Vi,17:136,30:134,31:$Vj,32:[1,135],33:17,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,44:52,45:53,48:$Vk,49:$Vl,50:$Vm,51:$Vn,76:54,77:$Vo,83:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},{15:[1,137]},{32:[1,138],83:$VB,84:$VC,85:$VD,86:$VE,87:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,107:$VQ,108:$VR,109:$VS},{47:[1,139]},{14:56,15:$Vi,17:140,31:$Vj,33:17,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,44:52,45:53,48:$Vk,49:$Vl,50:$Vm,51:$Vn,76:54,77:$Vo,83:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},{14:56,15:$Vi,17:141,31:$Vj,33:17,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,44:52,45:53,48:$Vk,49:$Vl,50:$Vm,51:$Vn,76:54,77:$Vo,83:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},{14:56,15:$Vi,17:142,31:$Vj,33:17,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,44:52,45:53,48:$Vk,49:$Vl,50:$Vm,51:$Vn,76:54,77:$Vo,83:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},{14:56,15:$Vi,17:143,31:$Vj,33:17,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,44:52,45:53,48:$Vk,49:$Vl,50:$Vm,51:$Vn,76:54,77:$Vo,83:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},{14:56,15:$Vi,17:144,31:$Vj,33:17,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,44:52,45:53,48:$Vk,49:$Vl,50:$Vm,51:$Vn,76:54,77:$Vo,83:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},{31:[1,145]},{21:[1,146]},{69:[1,147]},{7:150,8:151,14:11,15:$V$,20:$V2,21:$V01,33:17,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,40:152,41:$V11,43:$V21,44:153,53:148},{21:[1,157]},{21:[1,158]},o($Vz,[2,11]),{24:[1,160],26:159},{18:[1,161]},{14:72,15:$VA,28:162,33:17,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8},o($VZ,[2,17]),o($VZ,[2,18]),o($V31,[2,88],{85:$VD,87:$VF,88:$VG,89:$VH,108:$VR,109:$VS}),o($V_,[2,89],{88:$VG,108:$VR,109:$VS}),o($V31,[2,90],{85:$VD,87:$VF,88:$VG,89:$VH,108:$VR,109:$VS}),o($V31,[2,91],{85:$VD,87:$VF,88:$VG,89:$VH,108:$VR,109:$VS}),o($V_,[2,92],{88:$VG,108:$VR,109:$VS}),o($V41,[2,93],{83:$VB,84:$VC,85:$VD,86:$VE,87:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,107:$VQ,108:$VR,109:$VS}),o($V_,[2,94],{88:$VG,108:$VR,109:$VS}),o($V51,[2,95],{83:$VB,84:$VC,85:$VD,86:$VE,87:$VF,88:$VG,89:$VH,108:$VR,109:$VS}),o($V51,[2,96],{83:$VB,84:$VC,85:$VD,86:$VE,87:$VF,88:$VG,89:$VH,108:$VR,109:$VS}),o($V51,[2,97],{83:$VB,84:$VC,85:$VD,86:$VE,87:$VF,88:$VG,89:$VH,108:$VR,109:$VS}),o($V51,[2,98],{83:$VB,84:$VC,85:$VD,86:$VE,87:$VF,88:$VG,89:$VH,108:$VR,109:$VS}),o($V51,[2,99],{83:$VB,84:$VC,85:$VD,86:$VE,87:$VF,88:$VG,89:$VH,108:$VR,109:$VS}),o($V51,[2,100],{83:$VB,84:$VC,85:$VD,86:$VE,87:$VF,88:$VG,89:$VH,108:$VR,109:$VS}),o([18,25,27,32,60,81,82,96,97,107],[2,101],{83:$VB,84:$VC,85:$VD,86:$VE,87:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,108:$VR,109:$VS}),o([18,25,27,32,60,81,82,97,107],[2,102],{83:$VB,84:$VC,85:$VD,86:$VE,87:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,108:$VR,109:$VS}),{60:[1,163],83:$VB,84:$VC,85:$VD,86:$VE,87:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,107:$VQ,108:$VR,109:$VS},{31:[1,164]},{27:$V61,32:[1,165]},o($VT,[2,36]),o($V71,[2,38],{83:$VB,84:$VC,85:$VD,86:$VE,87:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,107:$VQ,108:$VR,109:$VS}),{31:[1,167]},o($VT,[2,122]),{31:[1,168]},{32:[1,169],83:$VB,84:$VC,85:$VD,86:$VE,87:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,107:$VQ,108:$VR,109:$VS},{32:[1,170],83:$VB,84:$VC,85:$VD,86:$VE,87:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,107:$VQ,108:$VR,109:$VS},{32:[1,171],83:$VB,84:$VC,85:$VD,86:$VE,87:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,107:$VQ,108:$VR,109:$VS},{32:[1,172],83:$VB,84:$VC,85:$VD,86:$VE,87:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,107:$VQ,108:$VR,109:$VS},{32:[1,173],83:$VB,84:$VC,85:$VD,86:$VE,87:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,107:$VQ,108:$VR,109:$VS},{14:56,15:$Vi,17:136,30:174,31:$Vj,33:17,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,44:52,45:53,48:$Vk,49:$Vl,50:$Vm,51:$Vn,76:54,77:$Vo,83:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},{7:177,8:178,11:181,12:182,13:183,14:189,15:$V81,17:188,20:$V2,31:$Vj,33:17,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,40:179,41:$V11,43:$V21,44:180,45:53,48:$Vk,49:$Vl,50:$Vm,51:$Vn,52:$V9,55:175,56:$Va,62:$Vb,63:184,64:$V91,65:185,66:$Va1,76:54,77:$Vo,78:176,79:$Vb1,80:$Vc1,83:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},{23:[1,193]},o($Vd1,[2,44],{54:[1,194]}),{7:177,8:178,11:181,12:182,13:183,14:189,15:$V81,17:188,20:$V2,31:$Vj,33:17,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,40:179,41:$V11,43:$V21,44:180,45:53,48:$Vk,49:$Vl,50:$Vm,51:$Vn,52:$V9,55:195,56:$Va,62:$Vb,63:184,64:$V91,65:185,66:$Va1,76:54,77:$Vo,78:176,79:$Vb1,80:$Vc1,83:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},o($Vz,[2,48]),o($Vz,[2,49]),o($Vz,[2,50]),{18:[1,196]},{15:$Ve1,16:$Vg,31:$VV},{31:[1,198]},{31:[1,199]},{57:200,58:201,59:$Vf1,61:$Vg1},{7:177,8:178,11:181,12:182,13:183,14:189,15:$V81,17:188,20:$V2,31:$Vj,33:17,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,40:179,41:$V11,43:$V21,44:180,45:53,48:$Vk,49:$Vl,50:$Vm,51:$Vn,52:$V9,55:204,56:$Va,62:$Vb,63:184,64:$V91,65:185,66:$Va1,76:54,77:$Vo,78:176,79:$Vb1,80:$Vc1,83:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},{18:[1,205]},{14:56,15:$Vi,17:136,30:206,31:$Vj,33:17,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,44:52,45:53,48:$Vk,49:$Vl,50:$Vm,51:$Vn,76:54,77:$Vo,83:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},o($Vz,[2,13]),o($VZ,[2,15]),{14:56,15:$Vi,17:207,31:$Vj,33:17,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,44:52,45:53,48:$Vk,49:$Vl,50:$Vm,51:$Vn,76:54,77:$Vo,83:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},{32:[1,208],106:[1,209]},o($VT,[2,35]),{14:56,15:$Vi,17:210,31:$Vj,33:17,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,44:52,45:53,48:$Vk,49:$Vl,50:$Vm,51:$Vn,76:54,77:$Vo,83:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},{14:56,15:$Vi,17:136,30:212,31:$Vj,32:[1,211],33:17,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,44:52,45:53,48:$Vk,49:$Vl,50:$Vm,51:$Vn,76:54,77:$Vo,83:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},{14:56,15:$Vi,17:213,31:$Vj,33:17,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,44:52,45:53,48:$Vk,49:$Vl,50:$Vm,51:$Vn,76:54,77:$Vo,83:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},o($VT,[2,40]),o($VT,[2,41]),o($VT,[2,42]),o($VT,[2,43]),o($VT,[2,70]),{27:$V61,32:[1,214]},{7:177,8:178,11:181,12:182,13:183,14:189,15:$V81,17:188,20:$V2,23:[1,215],31:$Vj,33:17,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,40:179,41:$V11,43:$V21,44:180,45:53,48:$Vk,49:$Vl,50:$Vm,51:$Vn,52:$V9,56:$Va,62:$Vb,63:184,64:$V91,65:185,66:$Va1,76:54,77:$Vo,78:216,79:$Vb1,80:$Vc1,83:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},o($Vh1,[2,72]),o($Vh1,[2,73]),o($Vh1,[2,74]),o($Vh1,[2,75]),o($Vi1,$VX,{18:[1,217]}),o($Vh1,[2,77]),o($Vh1,[2,78]),o($Vh1,[2,79]),o($Vh1,[2,80]),o($Vh1,[2,81]),{14:56,15:$Vi,17:219,18:[1,218],31:$Vj,33:17,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,44:52,45:53,48:$Vk,49:$Vl,50:$Vm,51:$Vn,76:54,77:$Vo,83:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},{18:[1,220]},{81:[1,221],82:[1,222],83:$VB,84:$VC,85:$VD,86:$VE,87:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,107:$VQ,108:$VR,109:$VS},{15:$Vd,19:27,24:$Ve,29:$Vf,46:$VY},o($Vi1,$VU,{15:$Ve1,16:$Vg,31:$VV,46:$VW}),{21:[1,223]},{31:[1,224]},o($Vc,[2,64]),{7:150,8:151,11:225,14:11,15:$V$,20:$V2,21:$V01,33:17,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,40:152,41:$V11,43:$V21,44:153,52:$V9,53:226},{7:177,8:178,11:181,12:182,13:183,14:189,15:$V81,17:188,20:$V2,23:[1,227],31:$Vj,33:17,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,40:179,41:$V11,43:$V21,44:180,45:53,48:$Vk,49:$Vl,50:$Vm,51:$Vn,52:$V9,56:$Va,62:$Vb,63:184,64:$V91,65:185,66:$Va1,76:54,77:$Vo,78:216,79:$Vb1,80:$Vc1,83:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},o($Vz,[2,51]),{16:$Vy},{14:56,15:$Vi,17:229,31:$Vj,33:17,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,42:228,44:52,45:53,48:$Vk,49:$Vl,50:$Vm,51:$Vn,76:54,77:$Vo,83:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},{14:56,15:$Vi,17:230,31:$Vj,33:17,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,44:52,45:53,48:$Vk,49:$Vl,50:$Vm,51:$Vn,76:54,77:$Vo,83:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},{23:[1,231],58:232,59:$Vf1,61:$Vg1},o($Vj1,[2,54]),{14:56,15:$Vi,17:233,31:$Vj,33:17,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,44:52,45:53,48:$Vk,49:$Vl,50:$Vm,51:$Vn,76:54,77:$Vo,83:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},{14:56,15:$Vi,17:234,31:$Vj,33:17,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,44:52,45:53,48:$Vk,49:$Vl,50:$Vm,51:$Vn,76:54,77:$Vo,83:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},{7:177,8:178,11:181,12:182,13:183,14:189,15:$V81,17:188,20:$V2,23:[1,235],31:$Vj,33:17,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,40:179,41:$V11,43:$V21,44:180,45:53,48:$Vk,49:$Vl,50:$Vm,51:$Vn,52:$V9,56:$Va,62:$Vb,63:184,64:$V91,65:185,66:$Va1,76:54,77:$Vo,78:216,79:$Vb1,80:$Vc1,83:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},o($Vz,[2,14]),{25:[1,236],27:$V61},o($V41,[2,116],{83:$VB,84:$VC,85:$VD,86:$VE,87:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,107:$VQ,108:$VR,109:$VS}),o($VT,[2,112]),o($VT,[2,113]),o($V71,[2,37],{83:$VB,84:$VC,85:$VD,86:$VE,87:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,107:$VQ,108:$VR,109:$VS}),o($VT,[2,114]),{27:$V61,32:[1,237]},{32:[1,238],83:$VB,84:$VC,85:$VD,86:$VE,87:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,107:$VQ,108:$VR,109:$VS},{18:[1,239]},o($Vc,[2,63]),o($Vh1,[2,71]),o($Vh1,[2,76]),o($Vh1,[2,82]),{18:[1,240],83:$VB,84:$VC,85:$VD,86:$VE,87:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,107:$VQ,108:$VR,109:$VS},o($Vh1,[2,84]),o($Vh1,[2,85]),o($Vh1,[2,86]),{7:177,8:178,11:181,12:182,13:183,14:189,15:$V81,17:188,20:$V2,31:$Vj,33:17,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,40:179,41:$V11,43:$V21,44:180,45:53,48:$Vk,49:$Vl,50:$Vm,51:$Vn,52:$V9,55:241,56:$Va,62:$Vb,63:184,64:$V91,65:185,66:$Va1,76:54,77:$Vo,78:176,79:$Vb1,80:$Vc1,83:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},{14:243,15:$Vk1,17:245,31:$Vj,33:17,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,44:52,45:53,48:$Vk,49:$Vl,50:$Vm,51:$Vn,67:242,76:54,77:$Vo,83:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},o($Vd1,[2,45]),o($Vd1,[2,46]),o($Vz,[2,47]),{27:[1,247],32:[1,246]},o($Vl1,[2,34],{83:$VB,84:$VC,85:$VD,86:$VE,87:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,107:$VQ,108:$VR,109:$VS}),{32:[1,248],83:$VB,84:$VC,85:$VD,86:$VE,87:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,107:$VQ,108:$VR,109:$VS},o($Vd1,[2,52]),o($Vj1,[2,53]),{60:[1,249],83:$VB,84:$VC,85:$VD,86:$VE,87:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,107:$VQ,108:$VR,109:$VS},{60:[1,250],83:$VB,84:$VC,85:$VD,86:$VE,87:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,107:$VQ,108:$VR,109:$VS},o($Vd1,[2,57]),{18:[2,21]},o($VT,[2,115]),o($VT,[2,39]),o($Vz,[2,23]),o($Vh1,[2,83]),{7:177,8:178,11:181,12:182,13:183,14:189,15:$V81,17:188,20:$V2,23:[1,251],31:$Vj,33:17,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,40:179,41:$V11,43:$V21,44:180,45:53,48:$Vk,49:$Vl,50:$Vm,51:$Vn,52:$V9,56:$Va,62:$Vb,63:184,64:$V91,65:185,66:$Va1,76:54,77:$Vo,78:216,79:$Vb1,80:$Vc1,83:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},{18:[1,252]},{15:[1,253],46:$VY},o([18,32,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,107,108,109],$VU,{16:[1,254],31:$VV,46:$VW}),o($Vm1,[2,62],{83:$VB,84:$VC,85:$VD,86:$VE,87:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,107:$VQ,108:$VR,109:$VS}),{18:[1,255]},{14:56,15:$Vi,17:256,31:$Vj,33:17,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,44:52,45:53,48:$Vk,49:$Vl,50:$Vm,51:$Vn,76:54,77:$Vo,83:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},{18:[1,257]},{7:177,8:178,11:181,12:182,13:183,14:189,15:$V81,17:188,20:$V2,31:$Vj,33:17,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,40:179,41:$V11,43:$V21,44:180,45:53,48:$Vk,49:$Vl,50:$Vm,51:$Vn,52:$V9,55:258,56:$Va,62:$Vb,63:184,64:$V91,65:185,66:$Va1,76:54,77:$Vo,78:176,79:$Vb1,80:$Vc1,83:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},{7:177,8:178,11:181,12:182,13:183,14:189,15:$V81,17:188,20:$V2,31:$Vj,33:17,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,40:179,41:$V11,43:$V21,44:180,45:53,48:$Vk,49:$Vl,50:$Vm,51:$Vn,52:$V9,55:259,56:$Va,62:$Vb,63:184,64:$V91,65:185,66:$Va1,76:54,77:$Vo,78:176,79:$Vb1,80:$Vc1,83:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},{62:[1,260]},{14:56,15:$Vi,17:261,31:$Vj,33:17,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,44:52,45:53,48:$Vk,49:$Vl,50:$Vm,51:$Vn,76:54,77:$Vo,83:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},{16:[1,262]},{14:56,15:$Vi,17:263,31:$Vj,33:17,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,44:52,45:53,48:$Vk,49:$Vl,50:$Vm,51:$Vn,76:54,77:$Vo,83:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},o($Vz,[2,31]),o($Vl1,[2,33],{83:$VB,84:$VC,85:$VD,86:$VE,87:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,107:$VQ,108:$VR,109:$VS}),o($Vz,[2,32]),o($Vj1,[2,55],{33:17,45:53,76:54,7:177,8:178,40:179,44:180,11:181,12:182,13:183,63:184,65:185,17:188,14:189,78:216,15:$V81,20:$V2,31:$Vj,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,41:$V11,43:$V21,48:$Vk,49:$Vl,50:$Vm,51:$Vn,52:$V9,56:$Va,62:$Vb,64:$V91,66:$Va1,77:$Vo,79:$Vb1,80:$Vc1,83:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx}),o($Vj1,[2,56],{33:17,45:53,76:54,7:177,8:178,40:179,44:180,11:181,12:182,13:183,63:184,65:185,17:188,14:189,78:216,15:$V81,20:$V2,31:$Vj,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,41:$V11,43:$V21,48:$Vk,49:$Vl,50:$Vm,51:$Vn,52:$V9,56:$Va,62:$Vb,64:$V91,66:$Va1,77:$Vo,79:$Vb1,80:$Vc1,83:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx}),{31:[1,264]},{18:[1,265],83:$VB,84:$VC,85:$VD,86:$VE,87:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,107:$VQ,108:$VR,109:$VS},{14:56,15:$Vi,17:266,31:$Vj,33:17,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,44:52,45:53,48:$Vk,49:$Vl,50:$Vm,51:$Vn,76:54,77:$Vo,83:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},o($Vm1,[2,61],{83:$VB,84:$VC,85:$VD,86:$VE,87:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,107:$VQ,108:$VR,109:$VS}),{14:56,15:$Vi,17:267,31:$Vj,33:17,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,44:52,45:53,48:$Vk,49:$Vl,50:$Vm,51:$Vn,76:54,77:$Vo,83:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},{14:243,15:$Vk1,17:245,31:$Vj,33:17,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,44:52,45:53,48:$Vk,49:$Vl,50:$Vm,51:$Vn,67:268,76:54,77:$Vo,83:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},o($Vm1,[2,60],{83:$VB,84:$VC,85:$VD,86:$VE,87:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,107:$VQ,108:$VR,109:$VS}),{32:[1,269],83:$VB,84:$VC,85:$VD,86:$VE,87:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,107:$VQ,108:$VR,109:$VS},{32:[1,270]},{18:[1,271]},{21:[1,272]},o($Vh1,[2,58]),{7:177,8:178,11:181,12:182,13:183,14:189,15:$V81,17:188,20:$V2,31:$Vj,33:17,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,40:179,41:$V11,43:$V21,44:180,45:53,48:$Vk,49:$Vl,50:$Vm,51:$Vn,52:$V9,55:273,56:$Va,62:$Vb,63:184,64:$V91,65:185,66:$Va1,76:54,77:$Vo,78:176,79:$Vb1,80:$Vc1,83:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},{7:177,8:178,11:181,12:182,13:183,14:189,15:$V81,17:188,20:$V2,23:[1,274],31:$Vj,33:17,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,40:179,41:$V11,43:$V21,44:180,45:53,48:$Vk,49:$Vl,50:$Vm,51:$Vn,52:$V9,56:$Va,62:$Vb,63:184,64:$V91,65:185,66:$Va1,76:54,77:$Vo,78:216,79:$Vb1,80:$Vc1,83:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx},o($Vh1,[2,59])],
defaultActions: {24:[2,1],69:[2,19],236:[2,21]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
    
   
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// se ignoran espacios en blanco /* skip whitespace */
break;
case 1://'.*  // comentario simple línea /* skip comment */
break;
case 2:// comentario multiple líneas /* IGNORE */
break;
case 3:return 105;
break;
case 4:return 34;
break;
case 5:return 35;
break;
case 6:return 37;
break;
case 7:return 101;
break;
case 8:return 102;
break;
case 9:return 38;
break;
case 10:return 36;
break;
case 11:return 20;
break;
case 12:return 'RMAIN';
break;
case 13:return 39;
break;
case 14:return 47;
break;
case 15:return 43;    // Esta imprime sin realizar un salto de línea
break;
case 16:return 41;  // Esta imprime realizando un salto de línea
break;
case 17:return 52;
break;
case 18:return 54;
break;
case 19:return 56;
break;
case 20:return 59;
break;
case 21:return 61;
break;
case 22:return 80;
break;
case 23:return 'RCONTINUE';
break;
case 24:return 79;
break;
case 25:return 62;
break;
case 26:return 64;
break;
case 27:return 66;
break;
case 28:return 'RIN';
break;
case 29:return 'ROF';
break;
case 30:return 108;
break;
case 31:return 109;
break;
case 32:return 'RPODER';
break;
case 33:return 71;    // pow(base,potencia) numeros
break;
case 34:return 72;
break;
case 35:return 73;
break;
case 36:return 74;
break;
case 37:return 75;
break;
case 38:return 'RLOG10';  // Logaritmo base 10
break;
case 39:return 27;
break;
case 40:return 18;
break;
case 41:return 46;
break;
case 42:return 60;
break;
case 43:return 31;
break;
case 44:return 32;
break;
case 45:return 24;
break;
case 46:return 25;
break;
case 47:return 21;
break;
case 48:return 23;
break;
case 49:return 86;
break;
case 50:return 83;
break;
case 51:return 87;
break;
case 52:return 88;
break;
case 53:return 89;
break;
case 54:return 107;
break;
case 55:return 'RNUMERAL'; //COPIA UN ARREGLO
break;
case 56:return 94;
break;
case 57:return 95;
break;
case 58:return 91;
break;
case 59:return 90;
break;
case 60:return 93;
break;
case 61:return 92;
break;
case 62:return 96;
break;
case 63:return 97;
break;
case 64:return 98;
break;
case 65:return 84;   // CONCATENA CADENAS -  "para" & "caidismo" = "paracaidismo"
break;
case 66:return 85;   // CONCATENA CADENAS POTENCIA - "Cadena"^3 = "CadenaCadenaCadena"
break;
case 67:return 16;
break;
case 68:return 'RACCESO_POCISION';  //animal = "Tigre"; println(animal.caracterOfPosition(2)); -- g
break;
case 69:return 'RACCESO_PORCION';   //animal = "Tigre"; println(animal.subString(2,4)); -- gre
break;
case 70:return 'RLENGHT';          //animal = "Tigre"; println(animal.length()); -- 5 // Tamaño de arreglos tmb
break;
case 71:return 'RMAYUSCULAS';       //animal = "Tigre"; println(animal.toUppercase()); -- TIGRE
break;
case 72:return 'RMINUSCULAS';     //animal = "Tigre"; println(animal.toLowercase()); -- tigre
break;
case 73:return 48;            //toInt(3.99999)  // retorna 3
break;
case 74:return 49;         //toDouble(34)  // retorna 34.0
break;
case 75:return 50;
break;
case 76:return 51;          //typeof(5 * 5) // int
break;
case 77:return 'RPUSH';
break;
case 78:return 'RPOP';
break;
case 79:return 100;
break;
case 80:return 99;
break;
case 81: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 103; 
break;
case 82: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 104; 
break;
case 83:return 15;          // ETIQUETAS - NOMBRE DE VARIABLES
break;
case 84:return 5;
break;
case 85:console.log("Lexico", yy_.yytext,  yy_.yylloc.first_line, yy_.yylloc.first_column)
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:null\b)/,/^(?:int\b)/,/^(?:double\b)/,/^(?:boolean\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:char\b)/,/^(?:String\b)/,/^(?:struct\b)/,/^(?:main\b)/,/^(?:void\b)/,/^(?:parse\b)/,/^(?:print\b)/,/^(?:println\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:in\b)/,/^(?:of\b)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\*\*)/,/^(?:pow\b)/,/^(?:sqrt\b)/,/^(?:sin\b)/,/^(?:cos\b)/,/^(?:tan\b)/,/^(?:log10\b)/,/^(?:,)/,/^(?:;)/,/^(?:\.)/,/^(?::)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:\?)/,/^(?:#)/,/^(?:==)/,/^(?:!=)/,/^(?:>)/,/^(?:<)/,/^(?:>=)/,/^(?:<=)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:&)/,/^(?:\^)/,/^(?:=)/,/^(?:caracterOfPosition\b)/,/^(?:subString\b)/,/^(?:length\b)/,/^(?:toUppercase\b)/,/^(?:toLowercase\b)/,/^(?:toInt\b)/,/^(?:toDouble\b)/,/^(?:string\b)/,/^(?:typeof\b)/,/^(?:push\b)/,/^(?:pop\b)/,/^(?:[0-9]+(\.[0-9]+)\b)/,/^(?:[0-9]+\b)/,/^(?:"[^\"]*")/,/^(?:'[^\']*')/,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}